<template>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
    <!-- Modern Header -->
    <header class="sticky top-0 z-50 backdrop-blur-xl bg-white/80 dark:bg-slate-900/80 border-b border-slate-200/50 dark:border-slate-700/50 shadow-sm">
      <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center space-x-6">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 bg-gradient-to-r from-red-600 to-orange-600 rounded-lg flex items-center justify-center">
                <UIcon name="i-heroicons-shield-exclamation" class="w-5 h-5" />
              </div>
              <h1 class="text-xl font-bold">
                Violation Management
              </h1>
            </div>
            <UBreadcrumb :links="breadcrumbLinks" class="md:flex" />
          </div>

          <div class="flex items-center space-x-4">
            <!-- Real-time Stats -->
            <div class="hidden lg:flex items-center space-x-3">
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-red-100 dark:bg-red-900/30 rounded-full">
                <div class="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                <span class="text-sm font-medium text-red-700 dark:text-red-300">{{ pendingReports }} Pending</span>
              </div>
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-yellow-100 dark:bg-yellow-900/30 rounded-full">
                <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
                <span class="text-sm font-medium text-yellow-700 dark:text-yellow-300">{{ pendingAppeals }} Appeals</span>
              </div>
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-blue-100 dark:bg-blue-900/30 rounded-full">
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse" />
                <span class="text-sm font-medium text-blue-700 dark:text-blue-300">{{ aiModerationQueue }} AI Queue</span>
              </div>
            </div>

            <!-- Quick Actions -->
            <UButton
              icon="i-heroicons-cog-8-tooth"
              variant="ghost"
              size="sm"
              class="hidden md:flex"
              @click="showBulkActionsModal = true"
            >
              Bulk Actions
            </UButton>

            <UButton
              icon="i-heroicons-arrow-path"
              variant="ghost"
              size="sm"
              :loading="isRefreshing"
              @click="refreshData"
            />
          </div>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-6 lg:px-8 py-8">
      <!-- Enhanced Navigation Tabs -->
      <div class="mb-8">
        <div class="border-b border-slate-200 dark:border-slate-700">
          <nav class="-mb-px flex space-x-8">
            <button
              v-for="tab in mainTabs"
              :key="tab.key"
              :class="[
                'group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-all duration-200',
                activeTab === tab.key
                  ? 'border-red-500 text-red-600 dark:text-red-400'
                  : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300 dark:text-slate-400 dark:hover:text-slate-300'
              ]"
              @click="activeTab = tab.key"
            >
              <UIcon
                :name="tab.icon"
                :class="[
                  'mr-2 w-5 h-5 transition-colors',
                  activeTab === tab.key
                    ? 'text-red-500 dark:text-red-400'
                    : 'text-slate-400 group-hover:text-slate-500'
                ]"
              />
              {{ tab.label }}
              <span
                v-if="tab.badge"
                :class="[
                  'ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  activeTab === tab.key
                    ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
                    : 'bg-slate-100 text-slate-800 dark:bg-slate-800 dark:text-slate-200'
                ]"
              >
                {{ tab.badge }}
              </span>
            </button>
          </nav>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="space-y-8">
        <UTabs
          :items="itemTabs"
          color="secondary"
          variant="link"
          class="gap-4 w-full"
          :ui="{ trigger: 'grow' }"
        >
          <template #dashboard>
            <!-- Key Metrics -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div
                v-for="metric in keyMetrics"
                :key="metric.key"
                class="relative overflow-hidden bg-white dark:bg-slate-800 rounded-2xl p-6 border border-slate-200 dark:border-slate-700 hover:shadow-lg transition-all duration-300"
              >
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm font-medium text-slate-600 dark:text-slate-400">
                      {{ metric.label }}
                    </p>
                    <p class="text-3xl font-bold text-slate-900 dark:text-white mt-2">
                      {{ metric.value }}
                    </p>
                    <div class="flex items-center mt-2">
                      <UIcon
                        :name="metric.trend === 'up' ? 'i-heroicons-arrow-trending-up' : metric.trend === 'down' ? 'i-heroicons-arrow-trending-down' : 'i-heroicons-minus'"
                        :class="[
                          'w-4 h-4 mr-1',
                          metric.trend === 'up' ? 'text-red-500' : metric.trend === 'down' ? 'text-emerald-500' : 'text-slate-400'
                        ]"
                      />
                      <span
                        :class="[
                          'text-sm font-medium',
                          metric.trend === 'up' ? 'text-red-600 dark:text-red-400' : metric.trend === 'down' ? 'text-emerald-600 dark:text-emerald-400' : 'text-slate-500'
                        ]"
                      >
                        {{ metric.change }}%
                      </span>
                      <span class="text-sm text-slate-500 ml-1">vs last week</span>
                    </div>
                  </div>
                  <div
                    :class="[
                      'w-12 h-12 rounded-xl flex items-center justify-center',
                      metric.bgColor
                    ]"
                  >
                    <UIcon :name="metric.icon" :class="['w-6 h-6', metric.iconColor]" />
                  </div>
                </div>

                <!-- Progress Bar -->
                <div class="mt-4">
                  <div class="w-full bg-slate-100 dark:bg-slate-700 rounded-full h-2">
                    <div
                      :class="[
                        'h-2 rounded-full transition-all duration-500',
                        metric.progressColor
                      ]"
                      :style="{ width: `${metric.progress}%` }"
                    />
                  </div>
                </div>
              </div>
            </div>

            <!-- Charts Section -->
            <div class="grid grid-cols-1 lg:grid-cols-6 gap-6">
              <!-- Violation Trends Chart (3/5 width) -->
              <UCard class="lg:col-span-4">
                <template #header>
                  <div class="flex items-center justify-between">
                    <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                      Violation Trends
                    </h3>
                    <USelectMenu
                      v-model="chartTimeRange"
                      :items="timeRangeOptions"
                      size="sm"
                    />
                  </div>
                </template>

                <div class="h-80 flex items-center justify-center text-slate-500 dark:text-slate-400">
                  <div class="text-center">
                    <UIcon name="i-heroicons-chart-bar" class="w-16 h-16 mx-auto mb-4 text-slate-300" />
                    <p>Violation trends chart</p>
                    <p class="text-sm mt-1">
                      Time Range: {{ chartTimeRange.label }}
                    </p>
                    <p class="text-sm mt-1">
                      Shows violation patterns over time
                    </p>
                  </div>
                </div>
              </UCard>

              <!-- Moderation Efficiency (2/5 width) -->
              <UCard class="lg:col-span-2">
                <template #header>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Moderation Efficiency
                  </h3>
                </template>

                <div class="space-y-6">
                  <div class="text-center">
                    <div class="text-4xl font-bold text-blue-600 dark:text-blue-400">
                      {{ moderationEfficiency }}%
                    </div>
                    <div class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                      Overall Efficiency
                    </div>
                  </div>

                  <div class="space-y-4">
                    <div
                      v-for="efficiency in efficiencyBreakdown"
                      :key="efficiency.key"
                      class="flex items-center justify-between p-3 rounded-xl bg-slate-50 dark:bg-slate-800"
                    >
                      <div class="flex items-center space-x-3">
                        <div
                          :class="[
                            'w-3 h-3 rounded-full',
                            efficiency.color
                          ]"
                        />
                        <span class="text-sm font-medium text-slate-700 dark:text-slate-300">
                          {{ efficiency.label }}
                        </span>
                      </div>
                      <div class="flex items-center space-x-3">
                        <div class="w-24 bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                          <div
                            :class="['h-2 rounded-full transition-all duration-500', efficiency.color]"
                            :style="{ width: `${efficiency.percentage}%` }"
                          />
                        </div>
                        <span class="text-sm font-semibold text-slate-900 dark:text-white min-w-[3rem] text-right">
                          {{ efficiency.percentage }}%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </UCard>
            </div>

            <!-- Recent Activities -->
            <UCard>
              <template #header>
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Recent Moderation Activities
                  </h3>
                  <UButton
                    variant="ghost"
                    size="sm"
                    trailing-icon="i-heroicons-arrow-right"
                    @click="activeTab = 'moderation-logs'"
                  >
                    View All
                  </UButton>
                </div>
              </template>

              <div class="space-y-4">
                <div
                  v-for="activity in recentActivities"
                  :key="activity.id"
                  class="flex items-start space-x-4 p-4 rounded-xl hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
                >
                  <div
                    :class="[
                      'w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0',
                      getActivityBgColor(activity.type)
                    ]"
                  >
                    <UIcon
                      :name="getActivityIcon(activity.type)"
                      :class="['w-5 h-5', getActivityIconColor(activity.type)]"
                    />
                  </div>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-slate-900 dark:text-white">
                      {{ activity.title }}
                    </p>
                    <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                      {{ activity.description }}
                    </p>
                    <div class="flex items-center space-x-4 mt-2">
                      <span class="text-xs text-slate-400">{{ formatTimeAgo(activity.timestamp) }}</span>
                      <UBadge
                        :label="activity.status"
                        :color="getStatusColor(activity.status as any)"
                        size="xs"
                        variant="soft"
                      />
                    </div>
                  </div>
                  <UButton
                    icon="i-heroicons-eye"
                    variant="ghost"
                    size="xs"
                    @click="viewActivityDetails(activity)"
                  />
                </div>
              </div>
            </UCard>
          </template>
          <template #reports />
          <template #appeals />
          <template #ai-moderation />
          <template #moderation-logs />
        </UTabs>
        <!-- Dashboard Overview -->
        <div v-if="activeTab === 'dashboard'" class="space-y-6">
          <!-- Key Metrics -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div
              v-for="metric in keyMetrics"
              :key="metric.key"
              class="relative overflow-hidden bg-white dark:bg-slate-800 rounded-2xl p-6 border border-slate-200 dark:border-slate-700 hover:shadow-lg transition-all duration-300"
            >
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-slate-600 dark:text-slate-400">
                    {{ metric.label }}
                  </p>
                  <p class="text-3xl font-bold text-slate-900 dark:text-white mt-2">
                    {{ metric.value }}
                  </p>
                  <div class="flex items-center mt-2">
                    <UIcon
                      :name="metric.trend === 'up' ? 'i-heroicons-arrow-trending-up' : metric.trend === 'down' ? 'i-heroicons-arrow-trending-down' : 'i-heroicons-minus'"
                      :class="[
                        'w-4 h-4 mr-1',
                        metric.trend === 'up' ? 'text-red-500' : metric.trend === 'down' ? 'text-emerald-500' : 'text-slate-400'
                      ]"
                    />
                    <span
                      :class="[
                        'text-sm font-medium',
                        metric.trend === 'up' ? 'text-red-600 dark:text-red-400' : metric.trend === 'down' ? 'text-emerald-600 dark:text-emerald-400' : 'text-slate-500'
                      ]"
                    >
                      {{ metric.change }}%
                    </span>
                    <span class="text-sm text-slate-500 ml-1">vs last week</span>
                  </div>
                </div>
                <div
                  :class="[
                    'w-12 h-12 rounded-xl flex items-center justify-center',
                    metric.bgColor
                  ]"
                >
                  <UIcon :name="metric.icon" :class="['w-6 h-6', metric.iconColor]" />
                </div>
              </div>

              <!-- Progress Bar -->
              <div class="mt-4">
                <div class="w-full bg-slate-100 dark:bg-slate-700 rounded-full h-2">
                  <div
                    :class="[
                      'h-2 rounded-full transition-all duration-500',
                      metric.progressColor
                    ]"
                    :style="{ width: `${metric.progress}%` }"
                  />
                </div>
              </div>
            </div>
          </div>

          <!-- Charts Section -->
          <div class="grid grid-cols-1 lg:grid-cols-6 gap-6">
            <!-- Violation Trends Chart (3/5 width) -->
            <UCard class="lg:col-span-4">
              <template #header>
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Violation Trends
                  </h3>
                  <USelectMenu
                    v-model="chartTimeRange"
                    :items="timeRangeOptions"
                    size="sm"
                  />
                </div>
              </template>

              <div class="h-80 flex items-center justify-center text-slate-500 dark:text-slate-400">
                <div class="text-center">
                  <UIcon name="i-heroicons-chart-bar" class="w-16 h-16 mx-auto mb-4 text-slate-300" />
                  <p>Violation trends chart</p>
                  <p class="text-sm mt-1">
                    Time Range: {{ chartTimeRange.label }}
                  </p>
                  <p class="text-sm mt-1">
                    Shows violation patterns over time
                  </p>
                </div>
              </div>
            </UCard>

            <!-- Moderation Efficiency (2/5 width) -->
            <UCard class="lg:col-span-2">
              <template #header>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  Moderation Efficiency
                </h3>
              </template>

              <div class="space-y-6">
                <div class="text-center">
                  <div class="text-4xl font-bold text-blue-600 dark:text-blue-400">
                    {{ moderationEfficiency }}%
                  </div>
                  <div class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Overall Efficiency
                  </div>
                </div>

                <div class="space-y-4">
                  <div
                    v-for="efficiency in efficiencyBreakdown"
                    :key="efficiency.key"
                    class="flex items-center justify-between p-3 rounded-xl bg-slate-50 dark:bg-slate-800"
                  >
                    <div class="flex items-center space-x-3">
                      <div
                        :class="[
                          'w-3 h-3 rounded-full',
                          efficiency.color
                        ]"
                      />
                      <span class="text-sm font-medium text-slate-700 dark:text-slate-300">
                        {{ efficiency.label }}
                      </span>
                    </div>
                    <div class="flex items-center space-x-3">
                      <div class="w-24 bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                        <div
                          :class="['h-2 rounded-full transition-all duration-500', efficiency.color]"
                          :style="{ width: `${efficiency.percentage}%` }"
                        />
                      </div>
                      <span class="text-sm font-semibold text-slate-900 dark:text-white min-w-[3rem] text-right">
                        {{ efficiency.percentage }}%
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </UCard>
          </div>

          <!-- Recent Activities -->
          <UCard>
            <template #header>
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  Recent Moderation Activities
                </h3>
                <UButton
                  variant="ghost"
                  size="sm"
                  trailing-icon="i-heroicons-arrow-right"
                  @click="activeTab = 'moderation-logs'"
                >
                  View All
                </UButton>
              </div>
            </template>

            <div class="space-y-4">
              <div
                v-for="activity in recentActivities"
                :key="activity.id"
                class="flex items-start space-x-4 p-4 rounded-xl hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
              >
                <div
                  :class="[
                    'w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0',
                    getActivityBgColor(activity.type)
                  ]"
                >
                  <UIcon
                    :name="getActivityIcon(activity.type)"
                    :class="['w-5 h-5', getActivityIconColor(activity.type)]"
                  />
                </div>
                <div class="flex-1 min-w-0">
                  <p class="text-sm font-medium text-slate-900 dark:text-white">
                    {{ activity.title }}
                  </p>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    {{ activity.description }}
                  </p>
                  <div class="flex items-center space-x-4 mt-2">
                    <span class="text-xs text-slate-400">{{ formatTimeAgo(activity.timestamp) }}</span>
                    <UBadge
                      :label="activity.status"
                      :color="getStatusColor(activity.status as any)"
                      size="xs"
                      variant="soft"
                    />
                  </div>
                </div>
                <UButton
                  icon="i-heroicons-eye"
                  variant="ghost"
                  size="xs"
                  @click="viewActivityDetails(activity)"
                />
              </div>
            </div>
          </UCard>
        </div>

        <!-- Reports Management -->
        <div v-if="activeTab === 'reports'" class="space-y-6">
          <!-- Reports Filters -->
          <UCard>
            <div class="p-2 bg-gradient-to-r from-slate-50 to-red-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="reportSearchQuery"
                    placeholder="Search reports by content, reporter, or target..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>

                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedReportStatus"
                    :items="reportStatusOptions"
                    placeholder="Status"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedReportType"
                    :items="reportTypeOptions"
                    placeholder="Type"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="reportSortBy"
                    :items="reportSortOptions"
                    placeholder="Sort by"
                    class="min-w-[140px]"
                  />
                  <UButton
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                    @click="resetReportFilters"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Reports Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Reports Management
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Review and manage user reports across the platform
                  </p>
                </div>

                <div class="flex items-center space-x-3">
                  <UButton
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                    @click="exportAllReports"
                  >
                    Export
                  </UButton>
                  <UButton
                    icon="i-heroicons-squares-plus"
                    variant="outline"
                    size="sm"
                    @click="showBulkReportActions = true"
                  >
                    Bulk Actions
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :selected-rows="selectedReports"
                :rows="paginatedReports"
                :columns="reportColumns"
                :loading="loadingReports"
                class="w-full"
                @update:selected-rows="selectedReports = $event"
              >
                <template #reporter-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <UAvatar
                      :src="row.reporter?.image"
                      :alt="row.reporter?.username"
                      size="sm"
                    />
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ row.reporter?.username }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        {{ row.reporter?.email }}
                      </p>
                    </div>
                  </div>
                </template>
                <template #target-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <div
                      :class="[
                        'w-8 h-8 rounded-lg flex items-center justify-center',
                        getTargetTypeBgColor(row.targetType)
                      ]"
                    >
                      <UIcon
                        :name="getTargetTypeIcon(row.targetType)"
                        :class="['w-4 h-4', getTargetTypeIconColor(row.targetType)]"
                      />
                    </div>
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ getTargetTitle(row) }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        {{ row.targetType }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #reason-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.reason }}
                    </p>
                  </div>
                </template>

                <template #status-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div
                      :class="[
                        'w-2 h-2 rounded-full',
                        getStatusDotColor(row.status)
                      ]"
                    />
                    <UBadge
                      :label="getStatusLabel(row.status)"
                      :color="getStatusColor(row.status)"
                      variant="soft"
                      size="sm"
                    />
                  </div>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                      @click="reviewReport(row)"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      icon="i-heroicons-check"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-green-50 dark:hover:bg-green-900/20"
                      @click="approveReport(row)"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      icon="i-heroicons-x-mark"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-red-50 dark:hover:bg-red-900/20"
                      @click="rejectReport(row)"
                    />
                    <UDropdownMenu :items="getReportActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdownMenu>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentReportPage - 1) * reportPageSize) + 1 }} to {{ Math.min(currentReportPage * reportPageSize, filteredReports.length) }} of {{ filteredReports.length }} results
                </div>
                <UPagination
                  v-model="currentReportPage"
                  :page-count="reportPageSize"
                  :total="filteredReports.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>

        <!-- Appeals Management -->
        <div v-if="activeTab === 'appeals'" class="space-y-6">
          <!-- Appeals Filters -->
          <UCard>
            <div class="p-2 bg-gradient-to-r from-slate-50 to-yellow-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="appealSearchQuery"
                    placeholder="Search appeals by user, content, or reason..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>

                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedAppealStatus"
                    :items="appealStatusOptions"
                    placeholder="Status"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedAppealType"
                    :items="appealTypeOptions"
                    placeholder="Type"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="appealSortBy"
                    :items="appealSortOptions"
                    placeholder="Sort by"
                    class="min-w-[140px]"
                  />
                  <UButton
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                    @click="resetAppealFilters"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Appeals Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Appeals Management
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Review and process user appeals for moderation actions
                  </p>
                </div>

                <div class="flex items-center space-x-3">
                  <UButton
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                    @click="exportAllAppeals"
                  >
                    Export
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :rows="paginatedAppeals"
                :columns="appealColumns"
                :loading="loadingAppeals"
                class="w-full"
              >
                <template #user-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <UAvatar
                      :src="row.user?.image"
                      :alt="row.user?.username"
                      size="sm"
                    />
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ row.user?.username }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        Violations: {{ row.user?.violation?.count || 0 }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #content-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <div
                      :class="[
                        'w-8 h-8 rounded-lg flex items-center justify-center',
                        getAppealContentBgColor(row.actionType)
                      ]"
                    >
                      <UIcon
                        :name="getAppealContentIcon(row.actionType)"
                        :class="['w-4 h-4', getAppealContentIconColor(row.actionType)]"
                      />
                    </div>
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ getAppealContentTitle(row) }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        Action: {{ row.actionType }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #reason-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.reason }}
                    </p>
                  </div>
                </template>

                <!-- <template #status-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div
                      :class="[
                        'w-2 h-2 rounded-full',
                        getStatusDotColor(row.status)
                      ]"
                    />
                    <UBadge
                      :label="getStatusLabel(row.status)"
                      :color="getStatusColor(row.status)"
                      variant="soft"
                      size="sm"
                    />
                  </div>
                </template> -->

                <template #handledBy-data="{ row }">
                  <div v-if="row.handledBy" class="flex items-center space-x-2">
                    <UAvatar
                      :src="row.handledBy?.image"
                      :alt="row.handledBy?.username"
                      size="xs"
                    />
                    <span class="text-sm text-slate-600 dark:text-slate-400">
                      {{ row.handledBy?.username }}
                    </span>
                  </div>
                  <span v-else class="text-sm text-slate-400">-</span>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                      @click="reviewAppeal(row)"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      icon="i-heroicons-check"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-green-50 dark:hover:bg-green-900/20"
                      @click="approveAppeal(row)"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      icon="i-heroicons-x-mark"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-red-50 dark:hover:bg-red-900/20"
                      @click="rejectAppeal(row)"
                    />
                    <UDropdownMenu :items="getAppealActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdownMenu>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentAppealPage - 1) * appealPageSize) + 1 }} to {{ Math.min(currentAppealPage * appealPageSize, filteredAppeals.length) }} of {{ filteredAppeals.length }} results
                </div>
                <UPagination
                  v-model="currentAppealPage"
                  :page-count="appealPageSize"
                  :total="filteredAppeals.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>

        <!-- AI Moderation -->
        <div v-if="activeTab === 'ai-moderation'" class="space-y-6">
          <!-- AI Stats -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-cpu-chip" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  AI Processing Rate
                </h3>
                <p class="text-3xl font-bold text-blue-600 dark:text-blue-400">
                  {{ aiProcessingRate }}/min
                </p>
                <p class="text-sm text-slate-500 mt-1">
                  Average processing speed
                </p>
              </div>
            </UCard>

            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-check-badge" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  AI Accuracy
                </h3>
                <p class="text-3xl font-bold text-emerald-600 dark:text-emerald-400">
                  {{ aiAccuracy }}%
                </p>
                <p class="text-sm text-slate-500 mt-1">
                  Confirmed by moderators
                </p>
              </div>
            </UCard>

            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-exclamation-triangle" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  False Positives
                </h3>
                <p class="text-3xl font-bold text-orange-600 dark:text-orange-400">
                  {{ aiFalsePositives }}%
                </p>
                <p class="text-sm text-slate-500 mt-1">
                  Requires improvement
                </p>
              </div>
            </UCard>
          </div>

          <!-- AI Queue -->
          <UCard>
            <template #header>
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  AI Moderation Queue
                </h3>
                <div class="flex items-center space-x-3">
                  <UBadge
                    :label="`${aiModerationQueue} items`"
                    color="info"
                    variant="soft"
                  />
                  <UButton
                    icon="i-heroicons-arrow-path"
                    variant="ghost"
                    size="sm"
                    :loading="refreshingAI"
                    @click="refreshAIQueue"
                  />
                </div>
              </div>
            </template>

            <div class="space-y-4">
              <div
                v-for="item in aiQueueItems"
                :key="item.id"
                class="flex items-center justify-between p-4 rounded-xl border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
              >
                <div class="flex items-center space-x-4">
                  <div
                    :class="[
                      'w-10 h-10 rounded-full flex items-center justify-center',
                      getAIItemBgColor(item.type)
                    ]"
                  >
                    <UIcon
                      :name="getAIItemIcon(item.type)"
                      :class="['w-5 h-5', getAIItemIconColor(item.type)]"
                    />
                  </div>
                  <div>
                    <p class="text-sm font-medium text-slate-900 dark:text-white">
                      {{ item.title }}
                    </p>
                    <p class="text-xs text-slate-500">
                      Confidence: {{ item.confidence }}% | {{ item.type }}
                    </p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <UBadge
                    :label="item.status"
                    :color="getAIStatusColor(item.status)"
                    size="xs"
                    variant="soft"
                  />
                  <UButton
                    icon="i-heroicons-eye"
                    size="xs"
                    variant="ghost"
                    @click="reviewAIItem(item)"
                  />
                </div>
              </div>
            </div>
          </UCard>
        </div>

        <!-- Moderation Logs -->
        <div v-if="activeTab === 'moderation-logs'" class="space-y-6">
          <!-- Logs Filters -->
          <UCard>
            <div class="p-6 bg-gradient-to-r from-slate-50 to-purple-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="logSearchQuery"
                    placeholder="Search logs by action, moderator, or content..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>

                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedLogAction"
                    :options="logActionOptions"
                    placeholder="Action"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedLogModerator"
                    :options="moderatorOptions"
                    placeholder="Moderator"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="logTimeRange"
                    :options="timeRangeOptions"
                    placeholder="Time Range"
                    class="min-w-[140px]"
                  />
                  <UButton
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                    @click="resetLogFilters"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Logs Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Moderation Logs
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Complete audit trail of all moderation activities
                  </p>
                </div>

                <div class="flex items-center space-x-3">
                  <UButton
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                    @click="exportLogs"
                  >
                    Export
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :rows="paginatedLogs"
                :columns="logColumns"
                :loading="loadingLogs"
                class="w-full"
              >
                <template #action-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div
                      :class="[
                        'w-8 h-8 rounded-lg flex items-center justify-center',
                        getActionBgColor(row.action)
                      ]"
                    >
                      <UIcon
                        :name="getActionIcon(row.action)"
                        :class="['w-4 h-4', getActionIconColor(row.action)]"
                      />
                    </div>
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ getActionLabel(row.action) }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ row.isSystemAction ? 'System' : 'Manual' }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #target-data="{ row }">
                  <div class="min-w-0">
                    <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                      {{ getLogTargetTitle(row) }}
                    </p>
                    <p class="text-xs text-slate-500 truncate">
                      {{ getLogTargetType(row) }}
                    </p>
                  </div>
                </template>

                <template #moderator-data="{ row }">
                  <div v-if="(row as ModerationLog).moderator" class="flex items-center space-x-2">
                    <UAvatar
                      :src="(row as ModerationLog).moderator?.image"
                      :alt="(row as ModerationLog).moderator?.username"
                      size="xs"
                    />
                    <span class="text-sm text-slate-600 dark:text-slate-400">
                      {{ (row as ModerationLog).moderator?.username }}
                    </span>
                  </div>
                  <div v-else class="flex items-center space-x-2">
                    <div class="w-6 h-6 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
                      <UIcon name="i-heroicons-cpu-chip" class="w-3 h-3 text-blue-600" />
                    </div>
                    <span class="text-sm text-slate-600 dark:text-slate-400">AI System</span>
                  </div>
                </template>

                <template #note-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.note || '-' }}
                    </p>
                  </div>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                      @click="viewLogDetails(row)"
                    />
                    <UDropdownMenu :items="getLogActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdownMenu>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentLogPage - 1) * logPageSize) + 1 }} to {{ Math.min(currentLogPage * logPageSize, filteredLogs.length) }} of {{ filteredLogs.length }} results
                </div>
                <UPagination
                  v-model="currentLogPage"
                  :page-count="logPageSize"
                  :total="filteredLogs.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>
      </div>
    </div>

    <!-- Modals -->
    <!-- Report Review Modal -->
    <UModal v-model:open="showReportModal" :class="{ width: 'max-w-4xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            Review Report
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showReportModal = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div v-if="selectedReport" class="space-y-6">
            <!-- Report Details -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Reporter</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <UAvatar
                      :src="selectedReport.reporter?.image"
                      :alt="selectedReport.reporter?.username"
                      size="sm"
                    />
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedReport.reporter?.username }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedReport.reporter?.email }}
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Report Reason</label>
                  <p class="text-sm text-slate-900 dark:text-white mt-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    {{ selectedReport.reason }}
                  </p>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Status</label>
                  <div class="mt-2">
                    <UBadge
                      :label="getStatusLabel(selectedReport.status)"
                      :color="getStatusColor(selectedReport.status)"
                      variant="soft"
                    />
                  </div>
                </div>
              </div>

              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Reported Content</label>
                  <div class="mt-2 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    <div class="flex items-center space-x-3 mb-3">
                      <div
                        :class="[
                          'w-8 h-8 rounded-lg flex items-center justify-center',
                          getTargetTypeBgColor(selectedReport.targetType)
                        ]"
                      >
                        <UIcon
                          :name="getTargetTypeIcon(selectedReport.targetType)"
                          :class="['w-4 h-4', getTargetTypeIconColor(selectedReport.targetType)]"
                        />
                      </div>
                      <div>
                        <p class="text-sm font-medium text-slate-900 dark:text-white">
                          {{ getTargetTitle(selectedReport) }}
                        </p>
                        <p class="text-xs text-slate-500">
                          {{ selectedReport.targetType }}
                        </p>
                      </div>
                    </div>
                    <p class="text-sm text-slate-700 dark:text-slate-300 line-clamp-4">
                      {{ getTargetContent(selectedReport) }}
                    </p>
                  </div>
                </div>

                <div v-if="selectedReport.moderator">
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Handled By</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <UAvatar
                      :src="selectedReport.moderator?.image"
                      :alt="selectedReport.moderator?.username"
                      size="sm"
                    />
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedReport.moderator?.username }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ formatDate(selectedReport.handledAt) }}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Action Form -->
            <div v-if="selectedReport.status === 'pending'" class="border-t border-slate-200 dark:border-slate-700 pt-6">
              <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                Take Action
              </h4>
              <UForm :state="reportActionForm" class="space-y-4" @submit="submitReportAction">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <UFormField label="Action" required>
                    <USelectMenu
                      v-model="reportActionForm.action"
                      :options="reportActionOptions"
                      placeholder="Select action..."
                    />
                  </UFormField>

                  <UFormField label="Severity" required>
                    <USelectMenu
                      v-model="reportActionForm.severity"
                      :options="severityOptions"
                      placeholder="Select severity..."
                    />
                  </UFormField>
                </div>

                <UFormField label="Note">
                  <UTextarea
                    v-model="reportActionForm.note"
                    placeholder="Add a note about this action..."
                    rows="3"
                  />
                </UFormField>

                <div class="flex justify-end space-x-3">
                  <UButton
                    variant="outline"
                    @click="showReportModal = false"
                  >
                    Cancel
                  </UButton>
                  <UButton
                    type="submit"
                    :loading="submittingReportAction"
                    color="red"
                  >
                    Submit Action
                  </UButton>
                </div>
              </UForm>
            </div>
          </div>
        </UCard>
      </template>
    </UModal>

    <!-- Appeal Review Modal -->
    <UModal v-model:open="showAppealModal" :class="{ width: 'max-w-4xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            Review Appeal
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showAppealModal = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div v-if="selectedAppeal" class="space-y-6">
            <!-- Appeal Details -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">User</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <UAvatar
                      :src="selectedAppeal.user?.image"
                      :alt="selectedAppeal.user?.username"
                      size="sm"
                    />
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedAppeal.user?.username }}
                      </p>
                      <p class="text-xs text-slate-500">
                        Violations: {{ selectedAppeal.user?.violation?.count || 0 }}
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Appeal Reason</label>
                  <p class="text-sm text-slate-900 dark:text-white mt-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    {{ selectedAppeal.reason }}
                  </p>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Action Type</label>
                  <div class="mt-2">
                    <UBadge
                      :label="selectedAppeal.actionType"
                      :color="getAppealActionColor(selectedAppeal.actionType)"
                      variant="soft"
                    />
                  </div>
                </div>
              </div>

              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Content</label>
                  <div class="mt-2 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    <div class="flex items-center space-x-3 mb-3">
                      <div
                        :class="[
                          'w-8 h-8 rounded-lg flex items-center justify-center',
                          getAppealContentBgColor(selectedAppeal.actionType)
                        ]"
                      >
                        <UIcon
                          :name="getAppealContentIcon(selectedAppeal.actionType)"
                          :class="['w-4 h-4', getAppealContentIconColor(selectedAppeal.actionType)]"
                        />
                      </div>
                      <div>
                        <p class="text-sm font-medium text-slate-900 dark:text-white">
                          {{ getAppealContentTitle(selectedAppeal) }}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                <div v-if="selectedAppeal.handledBy">
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Handled By</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <UAvatar
                      :src="selectedAppeal.handledBy?.image"
                      :alt="selectedAppeal.handledBy?.username"
                      size="sm"
                    />
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedAppeal.handledBy?.username }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedAppeal.handledAt ? formatDate(selectedAppeal.handledAt) : '' }}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Action Form -->
            <div v-if="selectedAppeal.status === 'pending'" class="border-t border-slate-200 dark:border-slate-700 pt-6">
              <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                Take Action
              </h4>
              <UForm :state="appealActionForm" class="space-y-4" @submit="submitAppealAction">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <UFormField label="Decision" required>
                    <USelectMenu
                      v-model="appealActionForm.decision"
                      :options="appealDecisionOptions"
                      placeholder="Select decision..."
                    />
                  </UFormField>

                  <UFormField label="Priority" required>
                    <USelectMenu
                      v-model="appealActionForm.priority"
                      :options="priorityOptions"
                      placeholder="Select priority..."
                    />
                  </UFormField>
                </div>

                <UFormField label="Response Message">
                  <UTextarea
                    v-model="appealActionForm.responseMessage"
                    placeholder="Add a response message..."
                    rows="3"
                  />
                </UFormField>

                <div class="flex justify-end space-x-3">
                  <UButton
                    variant="outline"
                    @click="showAppealModal = false"
                  >
                    Cancel
                  </UButton>
                  <UButton
                    type="submit"
                    :loading="submittingAppealAction"
                    color="primary"
                  >
                    Submit Decision
                  </UButton>
                </div>
              </UForm>
            </div>
          </div>
        </UCard>
      </template>
    </UModal>

    <!-- Bulk Actions Modal -->
    <UModal v-model:open="showBulkActionsModal" :class="{ width: 'max-w-2xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            Bulk Actions
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showBulkActionsModal = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Reports Bulk Actions -->
              <UCard>
                <template #header>
                  <h4 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Reports
                  </h4>
                </template>

                <div class="space-y-4">
                  <UButton
                    icon="i-heroicons-check-circle"
                    variant="outline"
                    color="success"
                    block
                    @click="bulkApproveReports"
                  >
                    Bulk Approve Pending
                  </UButton>
                  <UButton
                    icon="i-heroicons-x-circle"
                    variant="outline"
                    color="error"
                    block
                    @click="bulkRejectReports"
                  >
                    Bulk Reject Spam
                  </UButton>
                  <UButton
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    block
                    @click="exportAllReports"
                  >
                    Export All Reports
                  </UButton>
                </div>
              </UCard>

              <!-- Appeals Bulk Actions -->
              <UCard>
                <template #header>
                  <h4 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Appeals
                  </h4>
                </template>

                <div class="space-y-4">
                  <UButton
                    icon="i-heroicons-scale"
                    variant="outline"
                    color="secondary"
                    block
                    @click="bulkProcessAppeals"
                  >
                    Process Valid Appeals
                  </UButton>
                  <UButton
                    icon="i-heroicons-x-circle"
                    variant="outline"
                    color="error"
                    block
                    @click="bulkRejectAppeals"
                  >
                    Reject Invalid Appeals
                  </UButton>
                  <UButton
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    block
                    @click="exportAllAppeals"
                  >
                    Export All Appeals
                  </UButton>
                </div>
              </UCard>
            </div>

            <!-- AI Actions -->
            <UCard>
              <template #header>
                <h4 class="text-lg font-semibold text-slate-900 dark:text-white">
                  AI Moderation
                </h4>
              </template>

              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <UButton
                  icon="i-heroicons-cpu-chip"
                  variant="outline"
                  color="primary"
                  block
                  @click="retrainAIModel"
                >
                  Retrain AI Model
                </UButton>
                <UButton
                  icon="i-heroicons-adjustments-horizontal"
                  variant="outline"
                  color="warning"
                  block
                  @click="adjustAIThreshold"
                >
                  Adjust Threshold
                </UButton>
                <UButton
                  icon="i-heroicons-trash"
                  variant="outline"
                  color="error"
                  block
                  @click="clearAIQueue"
                >
                  Clear AI Queue
                </UButton>
              </div>
            </UCard>
          </div>
        </UCard>
      </template>
    </UModal>

    <!-- Bulk Report Actions Modal -->
    <UModal v-model:open="showBulkReportActions" :class="{ width: 'max-w-3xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            Bulk Report Actions
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showBulkReportActions = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div class="space-y-6">
            <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
              <p class="text-sm text-blue-800 dark:text-blue-200">
                {{ selectedReports.length }} reports selected for bulk action
              </p>
            </div>

            <UForm :state="bulkReportForm" class="space-y-4" @submit="submitBulkReportAction">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <UFormField label="Action" required>
                  <USelectMenu
                    v-model="bulkReportForm.action"
                    :items="bulkReportActionOptions"
                    placeholder="Select action..."
                  />
                </UFormField>

                <UFormField label="Severity" required>
                  <USelectMenu
                    v-model="bulkReportForm.severity"
                    :items="severityOptions"
                    placeholder="Select severity..."
                  />
                </UFormField>
              </div>

              <UFormField label="Bulk Note">
                <UTextarea
                  v-model="bulkReportForm.note"
                  placeholder="Add a note for all selected reports..."
                  class="w-full"
                  :rows="3"
                />
              </UFormField>

              <div class="flex justify-end space-x-3">
                <UButton
                  variant="outline"
                  @click="showBulkReportActions = false"
                >
                  Cancel
                </UButton>
                <UButton
                  type="submit"
                  :loading="submittingBulkReportAction"
                  color="primary"
                >
                  Apply to {{ selectedReports.length }} Reports
                </UButton>
              </div>
            </UForm>
          </div>
        </UCard>
      </template>
    </UModal>

    <!-- AI Item Review Modal -->
    <UModal v-model:open="showAIReviewModal" :class="{ width: 'max-w-4xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            AI Detection Review
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showAIReviewModal = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div v-if="selectedAIItem" class="space-y-6">
            <!-- AI Detection Details -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Content Type</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <div
                      :class="[
                        'w-8 h-8 rounded-lg flex items-center justify-center',
                        getAIItemBgColor(selectedAIItem.type)
                      ]"
                    >
                      <UIcon
                        :name="getAIItemIcon(selectedAIItem.type)"
                        :class="['w-4 h-4', getAIItemIconColor(selectedAIItem.type)]"
                      />
                    </div>
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedAIItem.title }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedAIItem.type }}
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">AI Confidence</label>
                  <div class="mt-2">
                    <div class="flex items-center space-x-3">
                      <div class="flex-1 bg-slate-200 dark:bg-slate-700 rounded-full h-3">
                        <div
                          class="h-3 rounded-full bg-gradient-to-r from-red-500 to-orange-500"
                          :style="{ width: `${selectedAIItem.confidence}%` }"
                        />
                      </div>
                      <span class="text-sm font-semibold text-slate-900 dark:text-white">
                        {{ selectedAIItem.confidence }}%
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Status</label>
                  <div class="mt-2">
                    <UBadge
                      :label="getStatusLabel(selectedAIItem.status)"
                      :color="getAIStatusColor(selectedAIItem.status)"
                      variant="soft"
                    />
                  </div>
                </div>
              </div>

              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Detection Details</label>
                  <div class="mt-2 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    <div class="space-y-2">
                      <div class="flex justify-between">
                        <span class="text-sm text-slate-600 dark:text-slate-400">Inappropriate Content:</span>
                        <span class="text-sm font-medium text-slate-900 dark:text-white">85%</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-sm text-slate-600 dark:text-slate-400">Spam Detection:</span>
                        <span class="text-sm font-medium text-slate-900 dark:text-white">12%</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-sm text-slate-600 dark:text-slate-400">Policy Violation:</span>
                        <span class="text-sm font-medium text-slate-900 dark:text-white">67%</span>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Detected At</label>
                  <p class="text-sm text-slate-600 dark:text-slate-400 mt-1">
                    {{ formatDate(selectedAIItem.createdAt) }}
                  </p>
                </div>
              </div>
            </div>

            <!-- Action Form -->
            <div class="border-t border-slate-200 dark:border-slate-700 pt-6">
              <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                Review Decision
              </h4>
              <UForm :state="aiReviewForm" class="space-y-4" @submit="submitAIReview">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <UFormField label="Decision" required>
                    <USelectMenu
                      v-model="aiReviewForm.decision"
                      :options="aiDecisionOptions"
                      placeholder="Select decision..."
                    />
                  </UFormField>

                  <UFormField label="Confidence Override">
                    <USelectMenu
                      v-model="aiReviewForm.confidenceOverride"
                      :options="confidenceOptions"
                      placeholder="Override confidence..."
                    />
                  </UFormField>
                </div>

                <UFormField label="Review Note">
                  <UTextarea
                    v-model="aiReviewForm.note"
                    placeholder="Add a note about this AI detection review..."
                    rows="3"
                  />
                </UFormField>

                <div class="flex justify-end space-x-3">
                  <UButton
                    variant="outline"
                    @click="showAIReviewModal = false"
                  >
                    Cancel
                  </UButton>
                  <UButton
                    type="submit"
                    :loading="submittingAIReview"
                    color="primary"
                  >
                    Submit Review
                  </UButton>
                </div>
              </UForm>
            </div>
          </div>
        </UCard>
      </template>
    </UModal>

    <!-- Log Details Modal -->
    <UModal v-model:open="showLogDetailsModal" :class="{ width: 'max-w-4xl' }">
      <template #header>
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
            Moderation Log Details
          </h3>
          <UButton
            icon="i-heroicons-x-mark"
            variant="ghost"
            size="sm"
            @click="showLogDetailsModal = false"
          />
        </div>
      </template>
      <template #body>
        <UCard>
          <div v-if="selectedLog" class="space-y-6">
            <!-- Log Details -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Action</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <div
                      :class="[
                        'w-8 h-8 rounded-lg flex items-center justify-center',
                        getActionBgColor(selectedLog.action)
                      ]"
                    >
                      <UIcon
                        :name="getActionIcon(selectedLog.action)"
                        :class="['w-4 h-4', getActionIconColor(selectedLog.action)]"
                      />
                    </div>
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ getActionLabel(selectedLog.action) }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedLog.isSystemAction ? 'System Action' : 'Manual Action' }}
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Target</label>
                  <p class="text-sm text-slate-900 dark:text-white mt-2">
                    {{ getLogTargetTitle(selectedLog) }}
                  </p>
                  <p class="text-xs text-slate-500">
                    {{ getLogTargetType(selectedLog) }}
                  </p>
                </div>

                <div>
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Timestamp</label>
                  <p class="text-sm text-slate-600 dark:text-slate-400 mt-1">
                    {{ formatDate(selectedLog.createdAt) }}
                  </p>
                </div>
              </div>

              <div class="space-y-4">
                <div v-if="selectedLog.moderator">
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Moderator</label>
                  <div class="flex items-center space-x-3 mt-2">
                    <UAvatar
                      :src="selectedLog.moderator?.image"
                      :alt="selectedLog.moderator?.username"
                      size="sm"
                    />
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ selectedLog.moderator?.username }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedLog.moderator?.role }}
                      </p>
                    </div>
                  </div>
                </div>

                <div v-if="selectedLog.note">
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Note</label>
                  <p class="text-sm text-slate-900 dark:text-white mt-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    {{ selectedLog.note }}
                  </p>
                </div>

                <div v-if="selectedLog.details">
                  <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Details</label>
                  <div class="mt-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg">
                    <pre class="text-xs text-slate-600 dark:text-slate-400 whitespace-pre-wrap">{{ JSON.stringify(selectedLog.details, null, 2) }}</pre>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </UCard>
      </template>
    </UModal>
  </div>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
    <!-- Modern Header -->
    <header class="sticky top-0 z-50 backdrop-blur-xl bg-white/80 dark:bg-slate-900/80 border-b border-slate-200/50 dark:border-slate-700/50 shadow-sm">
      <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center space-x-6">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 bg-gradient-to-r from-red-600 to-orange-600 rounded-lg flex items-center justify-center">
                <UIcon name="i-heroicons-shield-exclamation" class="w-5 h-5 text-white" />
              </div>
              <h1 class="text-xl font-bold bg-gradient-to-r from-slate-900 to-slate-600 dark:from-white dark:to-slate-300 bg-clip-text text-transparent">
                Violation Management
              </h1>
            </div>
            <UBreadcrumb :links="breadcrumbLinks" class="hidden md:flex" />
          </div>
          
          <div class="flex items-center space-x-4">
            <!-- Real-time Stats -->
            <div class="hidden lg:flex items-center space-x-3">
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-red-100 dark:bg-red-900/30 rounded-full">
                <div class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                <span class="text-sm font-medium text-red-700 dark:text-red-300">{{ pendingReports }} Pending</span>
              </div>
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-yellow-100 dark:bg-yellow-900/30 rounded-full">
                <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                <span class="text-sm font-medium text-yellow-700 dark:text-yellow-300">{{ pendingAppeals }} Appeals</span>
              </div>
              <div class="flex items-center space-x-2 px-3 py-1.5 bg-blue-100 dark:bg-blue-900/30 rounded-full">
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span class="text-sm font-medium text-blue-700 dark:text-blue-300">{{ aiModerationQueue }} AI Queue</span>
              </div>
            </div>

            <!-- Quick Actions -->
            <UButton
              @click="showBulkActionsModal = true"
              icon="i-heroicons-cog-8-tooth"
              variant="ghost"
              size="sm"
              class="hidden md:flex"
            >
              Bulk Actions
            </UButton>
            
            <UButton
              @click="refreshData"
              icon="i-heroicons-arrow-path"
              variant="ghost"
              size="sm"
              :loading="isRefreshing"
            />
          </div>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-6 lg:px-8 py-8">
      <!-- Enhanced Navigation Tabs -->
      <div class="mb-8">
        <div class="border-b border-slate-200 dark:border-slate-700">
          <nav class="-mb-px flex space-x-8">
            <button
              v-for="tab in mainTabs"
              :key="tab.key"
              @click="activeTab = tab.key"
              :class="[
                'group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-all duration-200',
                activeTab === tab.key
                  ? 'border-red-500 text-red-600 dark:text-red-400'
                  : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300 dark:text-slate-400 dark:hover:text-slate-300'
              ]"
            >
              <UIcon 
                :name="tab.icon" 
                :class="[
                  'mr-2 w-5 h-5 transition-colors',
                  activeTab === tab.key 
                    ? 'text-red-500 dark:text-red-400' 
                    : 'text-slate-400 group-hover:text-slate-500'
                ]" 
              />
              {{ tab.label }}
              <span 
                v-if="tab.badge" 
                :class="[
                  'ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
                  activeTab === tab.key
                    ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
                    : 'bg-slate-100 text-slate-800 dark:bg-slate-800 dark:text-slate-200'
                ]"
              >
                {{ tab.badge }}
              </span>
            </button>
          </nav>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="space-y-8">
        <!-- Dashboard Overview -->
        <div v-if="activeTab === 'dashboard'" class="space-y-6">
          <!-- Key Metrics -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div
              v-for="metric in keyMetrics"
              :key="metric.key"
              class="relative overflow-hidden bg-white dark:bg-slate-800 rounded-2xl p-6 border border-slate-200 dark:border-slate-700 hover:shadow-lg transition-all duration-300"
            >
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-slate-600 dark:text-slate-400">{{ metric.label }}</p>
                  <p class="text-3xl font-bold text-slate-900 dark:text-white mt-2">{{ metric.value }}</p>
                  <div class="flex items-center mt-2">
                    <UIcon 
                      :name="metric.trend === 'up' ? 'i-heroicons-arrow-trending-up' : metric.trend === 'down' ? 'i-heroicons-arrow-trending-down' : 'i-heroicons-minus'" 
                      :class="[
                        'w-4 h-4 mr-1',
                        metric.trend === 'up' ? 'text-red-500' : metric.trend === 'down' ? 'text-emerald-500' : 'text-slate-400'
                      ]" 
                    />
                    <span :class="[
                      'text-sm font-medium',
                      metric.trend === 'up' ? 'text-red-600 dark:text-red-400' : metric.trend === 'down' ? 'text-emerald-600 dark:text-emerald-400' : 'text-slate-500'
                    ]">
                      {{ metric.change }}%
                    </span>
                    <span class="text-sm text-slate-500 ml-1">vs last week</span>
                  </div>
                </div>
                <div :class="[
                  'w-12 h-12 rounded-xl flex items-center justify-center',
                  metric.bgColor
                ]">
                  <UIcon :name="metric.icon" :class="['w-6 h-6', metric.iconColor]" />
                </div>
              </div>
              
              <!-- Progress Bar -->
              <div class="mt-4">
                <div class="w-full bg-slate-100 dark:bg-slate-700 rounded-full h-2">
                  <div 
                    :class="[
                      'h-2 rounded-full transition-all duration-500',
                      metric.progressColor
                    ]"
                    :style="{ width: `${metric.progress}%` }"
                  ></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Charts Section -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Violation Trends Chart -->
            <UCard>
              <template #header>
                <div class="flex items-center justify-between">
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Violation Trends
                  </h3>
                  <USelectMenu
                    v-model="chartTimeRange"
                    :options="timeRangeOptions"
                    size="sm"
                  />
                </div>
              </template>
              
              <div class="h-80 flex items-center justify-center text-slate-500 dark:text-slate-400">
                <div class="text-center">
                  <UIcon name="i-heroicons-chart-bar" class="w-16 h-16 mx-auto mb-4 text-slate-300" />
                  <p>Violation trends chart</p>
                  <p class="text-sm mt-1">Shows violation patterns over time</p>
                </div>
              </div>
            </UCard>

            <!-- Moderation Efficiency -->
            <UCard>
              <template #header>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  Moderation Efficiency
                </h3>
              </template>
              
              <div class="space-y-6">
                <div class="text-center">
                  <div class="text-4xl font-bold text-blue-600 dark:text-blue-400">
                    {{ moderationEfficiency }}%
                  </div>
                  <div class="text-sm text-slate-500 dark:text-slate-400 mt-1">Overall Efficiency</div>
                </div>
                
                <div class="space-y-4">
                  <div
                    v-for="efficiency in efficiencyBreakdown"
                    :key="efficiency.key"
                    class="flex items-center justify-between p-3 rounded-xl bg-slate-50 dark:bg-slate-800"
                  >
                    <div class="flex items-center space-x-3">
                      <div :class="[
                        'w-3 h-3 rounded-full',
                        efficiency.color
                      ]"></div>
                      <span class="text-sm font-medium text-slate-700 dark:text-slate-300">
                        {{ efficiency.label }}
                      </span>
                    </div>
                    <div class="flex items-center space-x-3">
                      <div class="w-24 bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                        <div
                          :class="['h-2 rounded-full transition-all duration-500', efficiency.color]"
                          :style="{ width: `${efficiency.percentage}%` }"
                        ></div>
                      </div>
                      <span class="text-sm font-semibold text-slate-900 dark:text-white min-w-[3rem] text-right">
                        {{ efficiency.percentage }}%
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </UCard>
          </div>

          <!-- Recent Activities -->
          <UCard>
            <template #header>
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  Recent Moderation Activities
                </h3>
                <UButton
                  @click="activeTab = 'moderation-logs'"
                  variant="ghost"
                  size="sm"
                  trailing-icon="i-heroicons-arrow-right"
                >
                  View All
                </UButton>
              </div>
            </template>
            
            <div class="space-y-4">
              <div
                v-for="activity in recentActivities"
                :key="activity.id"
                class="flex items-start space-x-4 p-4 rounded-xl hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
              >
                <div :class="[
                  'w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0',
                  getActivityBgColor(activity.type)
                ]">
                  <UIcon 
                    :name="getActivityIcon(activity.type)" 
                    :class="['w-5 h-5', getActivityIconColor(activity.type)]" 
                  />
                </div>
                <div class="flex-1 min-w-0">
                  <p class="text-sm font-medium text-slate-900 dark:text-white">
                    {{ activity.title }}
                  </p>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    {{ activity.description }}
                  </p>
                  <div class="flex items-center space-x-4 mt-2">
                    <span class="text-xs text-slate-400">{{ formatTimeAgo(activity.timestamp) }}</span>
                    <UBadge
                      :label="activity.status"
                      :color="getStatusColor(activity.status)"
                      size="xs"
                      variant="soft"
                    />
                  </div>
                </div>
                <UButton
                  @click="viewActivityDetails(activity)"
                  icon="i-heroicons-eye"
                  variant="ghost"
                  size="xs"
                />
              </div>
            </div>
          </UCard>
        </div>

        <!-- Reports Management -->
        <div v-if="activeTab === 'reports'" class="space-y-6">
          <!-- Reports Filters -->
          <UCard>
            <div class="p-6 bg-gradient-to-r from-slate-50 to-red-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="reportSearchQuery"
                    placeholder="Search reports by content, reporter, or target..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>
                
                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedReportStatus"
                    :options="reportStatusOptions"
                    placeholder="Status"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedReportType"
                    :options="reportTypeOptions"
                    placeholder="Type"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="reportSortBy"
                    :options="reportSortOptions"
                    placeholder="Sort by"
                    class="min-w-[140px]"
                  />
                  <UButton
                    @click="resetReportFilters"
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Reports Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Reports Management
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Review and manage user reports across the platform
                  </p>
                </div>
                
                <div class="flex items-center space-x-3">
                  <UButton
                    @click="exportReports"
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                  >
                    Export
                  </UButton>
                  <UButton
                    @click="showBulkReportActions = true"
                    icon="i-heroicons-squares-plus"
                    variant="outline"
                    size="sm"
                  >
                    Bulk Actions
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :rows="paginatedReports"
                :columns="reportColumns"
                :loading="loadingReports"
                class="w-full"
                v-model="selectedReports"
              >
                <template #reporter-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <UAvatar
                      :src="row.reporter?.image"
                      :alt="row.reporter?.username"
                      size="sm"
                    />
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ row.reporter?.username }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        {{ row.reporter?.email }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #target-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <div :class="[
                      'w-8 h-8 rounded-lg flex items-center justify-center',
                      getTargetTypeBgColor(row.targetType)
                    ]">
                      <UIcon 
                        :name="getTargetTypeIcon(row.targetType)" 
                        :class="['w-4 h-4', getTargetTypeIconColor(row.targetType)]" 
                      />
                    </div>
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ getTargetTitle(row) }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        {{ row.targetType }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #reason-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.reason }}
                    </p>
                  </div>
                </template>

                <template #status-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div :class="[
                      'w-2 h-2 rounded-full',
                      getStatusDotColor(row.status)
                    ]"></div>
                    <UBadge
                      :label="getStatusLabel(row.status)"
                      :color="getStatusColor(row.status)"
                      variant="soft"
                      size="sm"
                    />
                  </div>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      @click="reviewReport(row)"
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      @click="approveReport(row)"
                      icon="i-heroicons-check"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-green-50 dark:hover:bg-green-900/20"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      @click="rejectReport(row)"
                      icon="i-heroicons-x-mark"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-red-50 dark:hover:bg-red-900/20"
                    />
                    <UDropdown :items="getReportActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdown>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentReportPage - 1) * reportPageSize) + 1 }} to {{ Math.min(currentReportPage * reportPageSize, filteredReports.length) }} of {{ filteredReports.length }} results
                </div>
                <UPagination
                  v-model="currentReportPage"
                  :page-count="reportPageSize"
                  :total="filteredReports.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>

        <!-- Appeals Management -->
        <div v-if="activeTab === 'appeals'" class="space-y-6">
          <!-- Appeals Filters -->
          <UCard>
            <div class="p-6 bg-gradient-to-r from-slate-50 to-yellow-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="appealSearchQuery"
                    placeholder="Search appeals by user, content, or reason..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>
                
                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedAppealStatus"
                    :options="appealStatusOptions"
                    placeholder="Status"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedAppealType"
                    :options="appealTypeOptions"
                    placeholder="Type"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="appealSortBy"
                    :options="appealSortOptions"
                    placeholder="Sort by"
                    class="min-w-[140px]"
                  />
                  <UButton
                    @click="resetAppealFilters"
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Appeals Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Appeals Management
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Review and process user appeals for moderation actions
                  </p>
                </div>
                
                <div class="flex items-center space-x-3">
                  <UButton
                    @click="exportAppeals"
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                  >
                    Export
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :rows="paginatedAppeals"
                :columns="appealColumns"
                :loading="loadingAppeals"
                class="w-full"
              >
                <template #user-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <UAvatar
                      :src="row.user?.image"
                      :alt="row.user?.username"
                      size="sm"
                    />
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ row.user?.username }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        Violations: {{ row.user?.violation?.count || 0 }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #content-data="{ row }">
                  <div class="flex items-center space-x-3">
                    <div :class="[
                      'w-8 h-8 rounded-lg flex items-center justify-center',
                      getAppealContentBgColor(row.actionType)
                    ]">
                      <UIcon 
                        :name="getAppealContentIcon(row.actionType)" 
                        :class="['w-4 h-4', getAppealContentIconColor(row.actionType)]" 
                      />
                    </div>
                    <div class="min-w-0">
                      <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                        {{ getAppealContentTitle(row) }}
                      </p>
                      <p class="text-xs text-slate-500 truncate">
                        Action: {{ row.actionType }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #reason-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.reason }}
                    </p>
                  </div>
                </template>

                <template #status-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div :class="[
                      'w-2 h-2 rounded-full',
                      getStatusDotColor(row.status)
                    ]"></div>
                    <UBadge
                      :label="getStatusLabel(row.status)"
                      :color="getStatusColor(row.status)"
                      variant="soft"
                      size="sm"
                    />
                  </div>
                </template>

                <template #handledBy-data="{ row }">
                  <div v-if="row.handledBy" class="flex items-center space-x-2">
                    <UAvatar
                      :src="row.handledBy?.image"
                      :alt="row.handledBy?.username"
                      size="xs"
                    />
                    <span class="text-sm text-slate-600 dark:text-slate-400">
                      {{ row.handledBy?.username }}
                    </span>
                  </div>
                  <span v-else class="text-sm text-slate-400">-</span>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      @click="reviewAppeal(row)"
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      @click="approveAppeal(row)"
                      icon="i-heroicons-check"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-green-50 dark:hover:bg-green-900/20"
                    />
                    <UButton
                      v-if="row.status === 'pending'"
                      @click="rejectAppeal(row)"
                      icon="i-heroicons-x-mark"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-red-50 dark:hover:bg-red-900/20"
                    />
                    <UDropdown :items="getAppealActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdown>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentAppealPage - 1) * appealPageSize) + 1 }} to {{ Math.min(currentAppealPage * appealPageSize, filteredAppeals.length) }} of {{ filteredAppeals.length }} results
                </div>
                <UPagination
                  v-model="currentAppealPage"
                  :page-count="appealPageSize"
                  :total="filteredAppeals.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>

        <!-- AI Moderation -->
        <div v-if="activeTab === 'ai-moderation'" class="space-y-6">
          <!-- AI Stats -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-cpu-chip" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  AI Processing Rate
                </h3>
                <p class="text-3xl font-bold text-blue-600 dark:text-blue-400">
                  {{ aiProcessingRate }}/min
                </p>
                <p class="text-sm text-slate-500 mt-1">Average processing speed</p>
              </div>
            </UCard>

            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-check-badge" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  AI Accuracy
                </h3>
                <p class="text-3xl font-bold text-emerald-600 dark:text-emerald-400">
                  {{ aiAccuracy }}%
                </p>
                <p class="text-sm text-slate-500 mt-1">Confirmed by moderators</p>
              </div>
            </UCard>

            <UCard>
              <div class="text-center p-6">
                <div class="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <UIcon name="i-heroicons-exclamation-triangle" class="w-8 h-8 text-white" />
                </div>
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-2">
                  False Positives
                </h3>
                <p class="text-3xl font-bold text-orange-600 dark:text-orange-400">
                  {{ aiFalsePositives }}%
                </p>
                <p class="text-sm text-slate-500 mt-1">Requires improvement</p>
              </div>
            </UCard>
          </div>

          <!-- AI Queue -->
          <UCard>
            <template #header>
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                  AI Moderation Queue
                </h3>
                <div class="flex items-center space-x-3">
                  <UBadge
                    :label="`${aiModerationQueue} items`"
                    color="blue"
                    variant="soft"
                  />
                  <UButton
                    @click="refreshAIQueue"
                    icon="i-heroicons-arrow-path"
                    variant="ghost"
                    size="sm"
                    :loading="refreshingAI"
                  />
                </div>
              </div>
            </template>

            <div class="space-y-4">
              <div
                v-for="item in aiQueueItems"
                :key="item.id"
                class="flex items-center justify-between p-4 rounded-xl border border-slate-200 dark:border-slate-700 hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors"
              >
                <div class="flex items-center space-x-4">
                  <div :class="[
                    'w-10 h-10 rounded-full flex items-center justify-center',
                    getAIItemBgColor(item.type)
                  ]">
                    <UIcon 
                      :name="getAIItemIcon(item.type)" 
                      :class="['w-5 h-5', getAIItemIconColor(item.type)]" 
                    />
                  </div>
                  <div>
                    <p class="text-sm font-medium text-slate-900 dark:text-white">
                      {{ item.title }}
                    </p>
                    <p class="text-xs text-slate-500">
                      Confidence: {{ item.confidence }}% | {{ item.type }}
                    </p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <UBadge
                    :label="item.status"
                    :color="getAIStatusColor(item.status)"
                    size="xs"
                    variant="soft"
                  />
                  <UButton
                    @click="reviewAIItem(item)"
                    icon="i-heroicons-eye"
                    size="xs"
                    variant="ghost"
                  />
                </div>
              </div>
            </div>
          </UCard>
        </div>

        <!-- Moderation Logs -->
        <div v-if="activeTab === 'moderation-logs'" class="space-y-6">
          <!-- Logs Filters -->
          <UCard>
            <div class="p-6 bg-gradient-to-r from-slate-50 to-purple-50 dark:from-slate-800 dark:to-slate-700">
              <div class="flex flex-col lg:flex-row gap-4">
                <div class="flex-1">
                  <UInput
                    v-model="logSearchQuery"
                    placeholder="Search logs by action, moderator, or content..."
                    icon="i-heroicons-magnifying-glass"
                    size="lg"
                    class="w-full"
                  />
                </div>
                
                <div class="flex flex-col sm:flex-row gap-3">
                  <USelectMenu
                    v-model="selectedLogAction"
                    :options="logActionOptions"
                    placeholder="Action"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="selectedLogModerator"
                    :options="moderatorOptions"
                    placeholder="Moderator"
                    class="min-w-[140px]"
                  />
                  <USelectMenu
                    v-model="logTimeRange"
                    :options="timeRangeOptions"
                    placeholder="Time Range"
                    class="min-w-[140px]"
                  />
                  <UButton
                    @click="resetLogFilters"
                    icon="i-heroicons-x-mark"
                    variant="outline"
                    size="sm"
                    class="shrink-0"
                  >
                    Clear
                  </UButton>
                </div>
              </div>
            </div>
          </UCard>

          <!-- Logs Table -->
          <UCard>
            <template #header>
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    Moderation Logs
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mt-1">
                    Complete audit trail of all moderation activities
                  </p>
                </div>
                
                <div class="flex items-center space-x-3">
                  <UButton
                    @click="exportLogs"
                    icon="i-heroicons-document-arrow-down"
                    variant="outline"
                    size="sm"
                  >
                    Export
                  </UButton>
                </div>
              </div>
            </template>

            <div class="overflow-x-auto">
              <UTable
                :rows="paginatedLogs"
                :columns="logColumns"
                :loading="loadingLogs"
                class="w-full"
              >
                <template #action-data="{ row }">
                  <div class="flex items-center space-x-2">
                    <div :class="[
                      'w-8 h-8 rounded-lg flex items-center justify-center',
                      getActionBgColor(row.action)
                    ]">
                      <UIcon 
                        :name="getActionIcon(row.action)" 
                        :class="['w-4 h-4', getActionIconColor(row.action)]" 
                      />
                    </div>
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ getActionLabel(row.action) }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ row.isSystemAction ? 'System' : 'Manual' }}
                      </p>
                    </div>
                  </div>
                </template>

                <template #target-data="{ row }">
                  <div class="min-w-0">
                    <p class="text-sm font-medium text-slate-900 dark:text-white truncate">
                      {{ getLogTargetTitle(row) }}
                    </p>
                    <p class="text-xs text-slate-500 truncate">
                      {{ getLogTargetType(row) }}
                    </p>
                  </div>
                </template>

                <template #moderator-data="{ row }">
                  <div v-if="row.moderator" class="flex items-center space-x-2">
                    <UAvatar
                      :src="row.moderator?.image"
                      :alt="row.moderator?.username"
                      size="xs"
                    />
                    <span class="text-sm text-slate-600 dark:text-slate-400">
                      {{ row.moderator?.username }}
                    </span>
                  </div>
                  <div v-else class="flex items-center space-x-2">
                    <div class="w-6 h-6 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
                      <UIcon name="i-heroicons-cpu-chip" class="w-3 h-3 text-blue-600" />
                    </div>
                    <span class="text-sm text-slate-600 dark:text-slate-400">AI System</span>
                  </div>
                </template>

                <template #note-data="{ row }">
                  <div class="max-w-xs">
                    <p class="text-sm text-slate-900 dark:text-white line-clamp-2">
                      {{ row.note || '-' }}
                    </p>
                  </div>
                </template>

                <template #createdAt-data="{ row }">
                  <div class="text-sm text-slate-600 dark:text-slate-400">
                    {{ formatDate(row.createdAt) }}
                  </div>
                </template>

                <template #actions-data="{ row }">
                  <div class="flex items-center space-x-1">
                    <UButton
                      @click="viewLogDetails(row)"
                      icon="i-heroicons-eye"
                      size="xs"
                      variant="ghost"
                      class="hover:bg-blue-50 dark:hover:bg-blue-900/20"
                    />
                    <UDropdown :items="getLogActions(row)">
                      <UButton
                        icon="i-heroicons-ellipsis-vertical"
                        size="xs"
                        variant="ghost"
                        class="hover:bg-slate-50 dark:hover:bg-slate-800"
                      />
                    </UDropdown>
                  </div>
                </template>
              </UTable>
            </div>

            <!-- Pagination -->
            <template #footer>
              <div class="flex items-center justify-between px-6 py-4 border-t border-slate-200 dark:border-slate-700">
                <div class="text-sm text-slate-500 dark:text-slate-400">
                  Showing {{ ((currentLogPage - 1) * logPageSize) + 1 }} to {{ Math.min(currentLogPage * logPageSize, filteredLogs.length) }} of {{ filteredLogs.length }} results
                </div>
                <UPagination
                  v-model="currentLogPage"
                  :page-count="logPageSize"
                  :total="filteredLogs.length"
                  size="sm"
                />
              </div>
            </template>
          </UCard>
        </div>
      </div>
    </div>

    <!-- Modals -->
    <!-- Report Review Modal -->
    <UModal v-model="showReportModal" :ui="{ width: 'max-w-4xl' }">
      <UCard>
        <template #header>
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
              Review Report
            </h3>
            <UButton
              @click="showReportModal = false"
              icon="i-heroicons-x-mark"
              variant="ghost"
              size="sm"
            />
          </div>
        </template>

        <div v-if="selectedReport" class="space-y-6">
          <!-- Report Details -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="space-y-4">
              <div>
                <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Reporter</label>
                <div class="flex items-center space-x-3 mt-2">
                  <UAvatar
                    :src="selectedReport.reporter?.image"
                    :alt="selectedReport.reporter?.username"
                    size="sm"
                  />
                  <div>
                    <p class="text-sm font-medium text-slate-900 dark:text-white">
                      {{ selectedReport.reporter?.username }}
                    </p>
                    <p class="text-xs text-slate-500">
                      {{ selectedReport.reporter?.email }}
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Report Reason</label>
                <p class="text-sm text-slate-900 dark:text-white mt-2 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg">
                  {{ selectedReport.reason }}
                </p>
              </div>

              <div>
                <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Status</label>
                <div class="mt-2">
                  <UBadge
                    :label="getStatusLabel(selectedReport.status)"
                    :color="getStatusColor(selectedReport.status)"
                    variant="soft"
                  />
                </div>
              </div>
            </div>

            <div class="space-y-4">
              <div>
                <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Reported Content</label>
                <div class="mt-2 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
                  <div class="flex items-center space-x-3 mb-3">
                    <div :class="[
                      'w-8 h-8 rounded-lg flex items-center justify-center',
                      getTargetTypeBgColor(selectedReport.targetType)
                    ]">
                      <UIcon 
                        :name="getTargetTypeIcon(selectedReport.targetType)" 
                        :class="['w-4 h-4', getTargetTypeIconColor(selectedReport.targetType)]" 
                      />
                    </div>
                    <div>
                      <p class="text-sm font-medium text-slate-900 dark:text-white">
                        {{ getTargetTitle(selectedReport) }}
                      </p>
                      <p class="text-xs text-slate-500">
                        {{ selectedReport.targetType }}
                      </p>
                    </div>
                  </div>
                  <p class="text-sm text-slate-700 dark:text-slate-300 line-clamp-4">
                    {{ getTargetContent(selectedReport) }}
                  </p>
                </div>
              </div>

              <div v-if="selectedReport.moderator">
                <label class="text-sm font-medium text-slate-700 dark:text-slate-300">Handled By</label>
                <div class="flex items-center space-x-3 mt-2">
                  <UAvatar
                    :src="selectedReport.moderator?.image"
                    :alt="selectedReport.moderator?.username"
                    size="sm"
                  />
                  <div>
                    <p class="text-sm font-medium text-slate-900 dark:text-white">
                      {{ selectedReport.moderator?.username }}
                    </p>
                    <p class="text-xs text-slate-500">
                      {{ formatDate(selectedReport.handledAt) }}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Action Form -->
          <div v-if="selectedReport.status === 'pending'" class="border-t border-slate-200 dark:border-slate-700 pt-6">
            <h4 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
              Take Action
            </h4>
            <UForm :state="reportActionForm" @submit="submitReportAction" class="space-y-4">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <UFormGroup label="Action" required>
                  <USelectMenu
                    v-model="reportActionForm.action"
                    :options="reportActionOptions"
                    placeholder="Select action..."
                  />
                </UFormGroup>

                <UFormGroup label="Severity" required>
                  <USelectMenu
                    v-model="reportActionForm.severity"
                    :options="severityOptions"
                    placeholder="Select severity..."
                  />
                </UFormGroup>
              </div>

              <UFormGroup label="Note">
                <UTextarea
                  v-model="reportActionForm.note"
                  placeholder="Add a note about this action..."
                  rows="3"
                />
              </UFormGroup>

              <div class="flex justify-end space-x-3">
                <UButton
                  @click="showReportModal = false"
                  variant="outline"
                >
                  Cancel
                </UButton>
                <UButton
                  type="submit"
                  :loading="submittingReportAction"
                  color="red"
                >
                  Submit Action
                </UButton>
              </div>
            </UForm>
          </div>
        </div>
      </UCard>
    </UModal>

    <!-- Toast Notifications -->
    <UNotifications />
  </div>
</template>

<script setup lang="ts">
definePageMeta({
  layout: false
})
// Types
interface User {
  _id: string
  username: string
  email: string
  image?: string
  role: string
  violation: {
    count: number
    userReports: number
    modConfirmed: boolean
    details?: any
  }
}

interface Report {
  _id: string
  reporter: User
  targetType: 'Rate' | 'Novel' | 'Chapter'
  targetId: string
  reason: string
  status: 'pending' | 'reviewed' | 'rejected'
  moderator?: User
  handledAt?: Date
  note?: string
  createdAt: Date
  target?: any
}

interface Appeal {
  _id: string
  user: User
  novelId?: string
  chapterId?: string
  actionType: 'reject' | 'warning' | 'flag' | 'hide'
  reason: string
  status: 'pending' | 'approved' | 'rejected' | 'deleted'
  handledBy?: User
  responseMessage?: string
  handledAt?: Date
  createdAt: Date
  novel?: any
  chapter?: any
}

interface ModerationLog {
  _id: string
  novelId?: string
  chapterId?: string
  moderator?: User
  action: string
  note?: string
  details?: any
  isSystemAction: boolean
  createdAt: Date
  novel?: any
  chapter?: any
}

interface AIQueueItem {
  id: string
  type: 'novel' | 'chapter' | 'rate'
  title: string
  confidence: number
  status: 'processing' | 'flagged' | 'approved'
  createdAt: Date
}

interface ReportActionForm {
  action: string
  severity: string
  note: string
}
const { getStatusLabel, getStatusColor, getStatusIcon } = useStatus()

// Reactive state
const activeTab = ref<string>('dashboard')
const isRefreshing = ref<boolean>(false)
const showAIReviewModal = ref<boolean>(false)
const showLogDetailsModal = ref<boolean>(false)

// Data
const reports = ref<Report[]>([])
const appeals = ref<Appeal[]>([])
const moderationLogs = ref<ModerationLog[]>([])
const aiQueueItems = ref<AIQueueItem[]>([])

// Search and filters
const reportSearchQuery = ref<string>('')
const selectedReportStatus = ref<{ label: string, value: string }>({ label: 'All Status', value: '' })
const selectedReportType = ref<{ label: string, value: string }>({ label: 'All Types', value: '' })
const reportSortBy = ref<{ label: string, value: string }>({ label: 'Newest First', value: 'createdAt' })

const appealSearchQuery = ref<string>('')
const selectedAppealStatus = ref<{ label: string, value: string }>({ label: 'All Status', value: '' })
const selectedAppealType = ref<{ label: string, value: string }>({ label: 'All Types', value: '' })
const appealSortBy = ref<{ label: string, value: string }>({ label: 'Newest First', value: 'createdAt' })

const logSearchQuery = ref<string>('')
const selectedLogAction = ref<string>('')
const chartTimeRange = ref<{ label: string, value: string }>({ label: 'Last 30 days', value: '30d' })
const logTimeRange = ref<string>('7d')

// Modal states
const showReportModal = ref<boolean>(false)
const showAppealModal = ref<boolean>(false)
const showBulkActionsModal = ref<boolean>(false)
const showBulkReportActions = ref<boolean>(false)

// Selected items
const selectedReport = ref<Report | null>(null)
const selectedAppeal = ref<Appeal | null>(null)
const selectedReports = ref<Report[]>([])
const selectedAIItem = ref<AIQueueItem | null>(null)
const selectedLog = ref<ModerationLog | null>(null)

// Loading states
const loadingReports = ref<boolean>(false)
const loadingAppeals = ref<boolean>(false)
const loadingLogs = ref<boolean>(false)
const refreshingAI = ref<boolean>(false)
const submittingReportAction = ref<boolean>(false)
const submittingAppealAction = ref<boolean>(false)
const submittingBulkReportAction = ref<boolean>(false)
const submittingAIReview = ref<boolean>(false)

// Add missing refreshAIQueue method
const refreshAIQueue = async (): Promise<void> => {
  refreshingAI.value = true
  try {
    // Simulate API call or refresh logic
    await new Promise(resolve => setTimeout(resolve, 1000))
    // Optionally update aiQueueItems.value here
  } finally {
    refreshingAI.value = false
  }
}

// Pagination
const currentReportPage = ref<number>(1)
const reportPageSize = ref<number>(10)
const currentAppealPage = ref<number>(1)
const appealPageSize = ref<number>(10)
const currentLogPage = ref<number>(1)
const logPageSize = ref<number>(10)

// Forms
interface AppealActionForm {
  decision: string
  priority: string
  responseMessage: string
}

interface BulkReportForm {
  action: { label: string, value: string }
  severity: { label: string, value: string }
  note: string
}

interface AIReviewForm {
  decision: string
  confidenceOverride: string
  note: string
}

const reportActionForm = ref<ReportActionForm>({
  action: '',
  severity: '',
  note: ''
})

const appealActionForm = ref<AppealActionForm>({
  decision: '',
  priority: '',
  responseMessage: ''
})

const bulkReportForm = ref<BulkReportForm>({
  action: { label: '', value: '' },
  severity: { label: '', value: '' },
  note: ''
})

const aiReviewForm = ref<AIReviewForm>({
  decision: '',
  confidenceOverride: '',
  note: ''
})

// Configuration
const mainTabs = computed(() => [
  {
    key: 'dashboard',
    label: 'Dashboard',
    icon: 'i-heroicons-chart-pie'
  },
  {
    key: 'reports',
    label: 'Reports',
    icon: 'i-heroicons-flag',
    badge: pendingReports.value
  },
  {
    key: 'appeals',
    label: 'Appeals',
    icon: 'i-heroicons-scale',
    badge: pendingAppeals.value
  },
  {
    key: 'ai-moderation',
    label: 'AI Moderation',
    icon: 'i-heroicons-cpu-chip',
    badge: aiModerationQueue.value
  },
  {
    key: 'moderation-logs',
    label: 'Logs',
    icon: 'i-heroicons-document-text'
  }
])

const timeRangeOptions = [
  { label: 'Last 7 days', value: '7d' },
  { label: 'Last 30 days', value: '30d' },
  { label: 'Last 3 months', value: '3m' },
  { label: 'Last year', value: '1y' }
]

const reportStatusOptions = [
  { label: 'All Status', value: '' },
  { label: 'Pending', value: 'pending' },
  { label: 'Reviewed', value: 'reviewed' },
  { label: 'Rejected', value: 'rejected' }
]

const reportTypeOptions = [
  { label: 'All Types', value: '' },
  { label: 'Novel', value: 'Novel' },
  { label: 'Chapter', value: 'Chapter' },
  { label: 'Rate', value: 'Rate' }
]

const reportSortOptions = [
  { label: 'Newest First', value: 'createdAt' },
  { label: 'Oldest First', value: 'createdAt_asc' },
  { label: 'Priority', value: 'priority' }
]

const appealStatusOptions = [
  { label: 'All Status', value: '' },
  { label: 'Pending', value: 'pending' },
  { label: 'Approved', value: 'approved' },
  { label: 'Rejected', value: 'rejected' },
  { label: 'Deleted', value: 'deleted' }
]

const appealTypeOptions = [
  { label: 'All Types', value: '' },
  { label: 'Reject', value: 'reject' },
  { label: 'Warning', value: 'warning' },
  { label: 'Flag', value: 'flag' },
  { label: 'Hide', value: 'hide' }
]

const appealSortOptions = [
  { label: 'Newest First', value: 'createdAt' },
  { label: 'Oldest First', value: 'createdAt_asc' },
  { label: 'Priority', value: 'priority' }
]

const logActionOptions = [
  { label: 'All Actions', value: '' },
  { label: 'Approve', value: 'approve' },
  { label: 'Reject', value: 'reject' },
  { label: 'Warning', value: 'warning' },
  { label: 'Hide', value: 'hide' },
  { label: 'Flag', value: 'flag' }
]

const moderatorOptions = computed(() => {
  const moderators = [...new Set(moderationLogs.value.map(log => log.moderator).filter(Boolean))]
  return [
    { label: 'All Moderators', value: '' },
    ...moderators.map(mod => ({ label: mod!.username, value: mod!._id }))
  ]
})

const reportActionOptions = [
  { label: 'Approve Report', value: 'approve' },
  { label: 'Reject Report', value: 'reject' },
  { label: 'Flag Content', value: 'flag' },
  { label: 'Hide Content', value: 'hide' },
  { label: 'Warning', value: 'warning' }
]

const severityOptions = [
  { label: 'Low', value: 'low' },
  { label: 'Medium', value: 'medium' },
  { label: 'High', value: 'high' },
  { label: 'Critical', value: 'critical' }
]

const appealDecisionOptions = [
  { label: 'Approve Appeal', value: 'approve' },
  { label: 'Reject Appeal', value: 'reject' },
  { label: 'Partial Approval', value: 'partial' }
]

const priorityOptions = [
  { label: 'Low', value: 'low' },
  { label: 'Low', value: 'low' },
  { label: 'Medium', value: 'medium' },
  { label: 'High', value: 'high' },
  { label: 'Critical', value: 'critical' }
]

const bulkReportActionOptions = [
  { label: 'Approve All', value: 'approve_all' },
  { label: 'Reject All', value: 'reject_all' },
  { label: 'Flag All', value: 'flag_all' },
  { label: 'Hide All Content', value: 'hide_all' }
]

const aiDecisionOptions = [
  { label: 'Confirm AI Detection', value: 'confirm' },
  { label: 'Override - False Positive', value: 'false_positive' },
  { label: 'Override - Needs Review', value: 'needs_review' }
]

const confidenceOptions = [
  { label: 'Very Low (0-20%)', value: 'very_low' },
  { label: 'Low (21-40%)', value: 'low' },
  { label: 'Medium (41-60%)', value: 'medium' },
  { label: 'High (61-80%)', value: 'high' },
  { label: 'Very High (81-100%)', value: 'very_high' }
]

// Table columns
const reportColumns = [
  { id: 'reporter', label: 'Reporter' },
  { id: 'target', label: 'Target Content' },
  { id: 'reason', label: 'Reason' },
  { id: 'status', label: 'Status' },
  { id: 'createdAt', label: 'Date' },
  { id: 'actions', label: 'Actions' }
]

const appealColumns = [
  { id: 'user', label: 'User' },
  { id: 'content', label: 'Content' },
  { id: 'reason', label: 'Appeal Reason' },
  { id: 'status', label: 'Status' },
  { id: 'handledBy', label: 'Handled By' },
  { id: 'createdAt', label: 'Date' },
  { id: 'actions', label: 'Actions' }
]

const logColumns = [
  { id: 'action', label: 'Action' },
  { id: 'target', label: 'Target' },
  { id: 'moderator', label: 'Moderator' },
  { id: 'note', label: 'Note' },
  { id: 'createdAt', label: 'Date' },
  { id: 'actions', label: 'Actions' }
]

// Mock data
const mockReports: Report[] = [
  {
    _id: '1',
    reporter: {
      _id: 'u1',
      username: 'user123',
      email: 'user123@example.com',
      role: 'user',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    targetType: 'Novel',
    targetId: 'n1',
    reason: 'This novel contains inappropriate content that violates community guidelines.',
    status: 'pending',
    createdAt: new Date('2024-01-15'),
    target: {
      title: 'The Legendary Sword Master',
      content: 'An epic tale of adventure...'
    }
  },
  {
    _id: '2',
    reporter: {
      _id: 'u2',
      username: 'moderator1',
      email: 'mod1@example.com',
      role: 'moderator',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    targetType: 'Chapter',
    targetId: 'c1',
    reason: 'Chapter contains spam content and irrelevant information.',
    status: 'reviewed',
    moderator: {
      _id: 'm1',
      username: 'admin1',
      email: 'admin1@example.com',
      role: 'admin',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    handledAt: new Date('2024-01-16'),
    note: 'Content reviewed and action taken.',
    createdAt: new Date('2024-01-14'),
    target: {
      title: 'Chapter 1: The Beginning',
      content: 'In a small village nestled at the foot of the mountains...'
    }
  }
]

const mockAppeals: Appeal[] = [
  {
    _id: '1',
    user: {
      _id: 'u3',
      username: 'author1',
      email: 'author1@example.com',
      role: 'user',
      violation: { count: 2, userReports: 1, modConfirmed: true }
    },
    novelId: 'n1',
    actionType: 'reject',
    reason: 'I believe my novel was wrongly rejected. The content follows all community guidelines and does not contain any inappropriate material.',
    status: 'pending',
    createdAt: new Date('2024-01-16'),
    novel: {
      title: 'The Magical World Chronicles',
      description: 'A fantasy adventure story...'
    }
  },
  {
    _id: '2',
    user: {
      _id: 'u4',
      username: 'writer2',
      email: 'writer2@example.com',
      role: 'user',
      violation: { count: 1, userReports: 0, modConfirmed: false }
    },
    chapterId: 'c2',
    actionType: 'warning',
    reason: 'The warning issued for this chapter seems unfair. I have reviewed the content and made necessary changes.',
    status: 'approved',
    handledBy: {
      _id: 'm2',
      username: 'moderator2',
      email: 'mod2@example.com',
      role: 'moderator',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    responseMessage: 'Appeal approved. Warning has been removed.',
    handledAt: new Date('2024-01-17'),
    createdAt: new Date('2024-01-15'),
    chapter: {
      title: 'Chapter 5: The Great Battle',
      content: 'The battle raged on...'
    }
  }
]

const mockModerationLogs: ModerationLog[] = [
  {
    _id: '1',
    novelId: 'n1',
    moderator: {
      _id: 'm1',
      username: 'admin1',
      email: 'admin1@example.com',
      role: 'admin',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    action: 'approve',
    note: 'Content meets community standards.',
    isSystemAction: false,
    createdAt: new Date('2024-01-16'),
    novel: {
      title: 'The Legendary Sword Master'
    }
  },
  {
    _id: '2',
    chapterId: 'c1',
    action: 'flag',
    note: 'AI detected potential policy violation.',
    details: { confidence: 0.85, violationType: 'inappropriate_content' },
    isSystemAction: true,
    createdAt: new Date('2024-01-15'),
    chapter: {
      title: 'Chapter 1: The Beginning'
    }
  }
]

const mockAIQueueItems: AIQueueItem[] = [
  {
    id: '1',
    type: 'novel',
    title: 'The Dark Chronicles',
    confidence: 92,
    status: 'flagged',
    createdAt: new Date('2024-01-16')
  },
  {
    id: '2',
    type: 'chapter',
    title: 'Chapter 3: The Forbidden Magic',
    confidence: 78,
    status: 'processing',
    createdAt: new Date('2024-01-16')
  }
]

// Computed properties
const breadcrumbLinks = computed(() => {
  const links = [{ label: 'Dashboard', to: '/' }]

  if (activeTab.value === 'dashboard') {
    links.push({ label: 'Violation Management', to: '/' })
  } else if (activeTab.value === 'reports') {
    links.push({ label: 'Reports Management', to: '/' })
  } else if (activeTab.value === 'appeals') {
    links.push({ label: 'Appeals Management', to: '/' })
  } else if (activeTab.value === 'ai-moderation') {
    links.push({ label: 'AI Moderation', to: '/' })
  } else if (activeTab.value === 'moderation-logs') {
    links.push({ label: 'Moderation Logs', to: '/' })
  }

  return links
})

// Statistics
const pendingReports = computed(() => reports.value.filter(r => r.status === 'pending').length)
const pendingAppeals = computed(() => appeals.value.filter(a => a.status === 'pending').length)
const aiModerationQueue = computed(() => aiQueueItems.value.filter(item => item.status === 'processing').length)

const totalReports = computed(() => reports.value.length)
const totalAppeals = computed(() => appeals.value.length)
const totalViolations = computed(() => 156) // Mock data
const moderationEfficiency = computed(() => 94) // Mock data
const aiProcessingRate = computed(() => 45) // Mock data
const aiAccuracy = computed(() => 87) // Mock data
const aiFalsePositives = computed(() => 13) // Mock data

const keyMetrics = computed(() => [
  {
    key: 'total-reports',
    label: 'Total Reports',
    value: totalReports.value,
    icon: 'i-heroicons-flag',
    bgColor: 'bg-red-100 dark:bg-red-900/30',
    iconColor: 'text-red-600',
    progressColor: 'bg-red-500',
    progress: 100,
    trend: 'up',
    change: 15
  },
  {
    key: 'pending-reports',
    label: 'Pending Reports',
    value: pendingReports.value,
    icon: 'i-heroicons-clock',
    bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
    iconColor: 'text-yellow-600',
    progressColor: 'bg-yellow-500',
    progress: (pendingReports.value / totalReports.value) * 100,
    trend: 'down',
    change: 8
  },
  {
    key: 'total-appeals',
    label: 'Total Appeals',
    value: totalAppeals.value,
    icon: 'i-heroicons-scale',
    bgColor: 'bg-blue-100 dark:bg-blue-900/30',
    iconColor: 'text-blue-600',
    progressColor: 'bg-blue-500',
    progress: 100,
    trend: 'up',
    change: 12
  },
  {
    key: 'violations',
    label: 'Total Violations',
    value: totalViolations.value,
    icon: 'i-heroicons-exclamation-triangle',
    bgColor: 'bg-orange-100 dark:bg-orange-900/30',
    iconColor: 'text-orange-600',
    progressColor: 'bg-orange-500',
    progress: 100,
    trend: 'down',
    change: 5
  }
])

const efficiencyBreakdown = computed(() => [
  {
    key: 'response-time',
    label: 'Response Time',
    percentage: 92,
    color: 'bg-emerald-500'
  },
  {
    key: 'accuracy',
    label: 'Decision Accuracy',
    percentage: 96,
    color: 'bg-blue-500'
  },
  {
    key: 'user-satisfaction',
    label: 'User Satisfaction',
    percentage: 89,
    color: 'bg-purple-500'
  }
])

const recentActivities = computed(() => [
  {
    id: '1',
    type: 'report',
    title: 'New report submitted',
    description: 'User reported inappropriate content in "The Dark Chronicles"',
    status: 'pending',
    timestamp: new Date('2024-01-16T10:30:00')
  },
  {
    id: '2',
    type: 'appeal',
    title: 'Appeal approved',
    description: 'Appeal for "Chapter 5: The Great Battle" has been approved',
    status: 'approved',
    timestamp: new Date('2024-01-16T09:15:00')
  },
  {
    id: '3',
    type: 'ai-flag',
    title: 'AI flagged content',
    description: 'AI system flagged potential violation in new chapter',
    status: 'flagged',
    timestamp: new Date('2024-01-16T08:45:00')
  }
])

// Filtered data
const filteredReports = computed(() => {
  let filtered = [...reports.value]

  if (reportSearchQuery.value) {
    const query = reportSearchQuery.value.toLowerCase()
    filtered = filtered.filter(report =>
      report.reason.toLowerCase().includes(query)
      || report.reporter.username.toLowerCase().includes(query)
      || (report.target?.title && report.target.title.toLowerCase().includes(query))
    )
  }

  if (selectedReportStatus.value.value) {
    filtered = filtered.filter(report => report.status === selectedReportStatus.value.value)
  }

  if (selectedReportType.value.value) {
    filtered = filtered.filter(report => report.targetType === selectedReportType.value.value)
  }

  // Sorting
  filtered.sort((a, b) => {
    switch (reportSortBy.value.value) {
      case 'createdAt':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'createdAt_asc':
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      default:
        return 0
    }
  })

  return filtered
})

const paginatedReports = computed(() => {
  const start = (currentReportPage.value - 1) * reportPageSize.value
  const end = start + reportPageSize.value
  return filteredReports.value.slice(start, end)
})

const filteredAppeals = computed(() => {
  let filtered = [...appeals.value]

  if (appealSearchQuery.value) {
    const query = appealSearchQuery.value.toLowerCase()
    filtered = filtered.filter(appeal =>
      appeal.reason.toLowerCase().includes(query)
      || appeal.user.username.toLowerCase().includes(query)
      || (appeal.novel?.title && appeal.novel.title.toLowerCase().includes(query))
      || (appeal.chapter?.title && appeal.chapter.title.toLowerCase().includes(query))
    )
  }

  if (selectedAppealStatus.value.value) {
    filtered = filtered.filter(appeal => appeal.status === selectedAppealStatus.value.value)
  }

  if (selectedAppealType.value.value) {
    filtered = filtered.filter(appeal => appeal.actionType === selectedAppealType.value.value)
  }

  // Sorting
  filtered.sort((a, b) => {
    switch (appealSortBy.value.value) {
      case 'createdAt':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'createdAt_asc':
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      default:
        return 0
    }
  })

  return filtered
})

const paginatedAppeals = computed(() => {
  const start = (currentAppealPage.value - 1) * appealPageSize.value
  const end = start + appealPageSize.value
  return filteredAppeals.value.slice(start, end)
})

const filteredLogs = computed(() => {
  let filtered = [...moderationLogs.value]

  if (logSearchQuery.value) {
    const query = logSearchQuery.value.toLowerCase()
    filtered = filtered.filter(log =>
      log.action.toLowerCase().includes(query)
      || (log.moderator?.username && log.moderator.username.toLowerCase().includes(query))
      || (log.note && log.note.toLowerCase().includes(query))
    )
  }

  if (selectedLogAction.value) {
    filtered = filtered.filter(log => log.action === selectedLogAction.value)
  }

  if (selectedLogModerator.value) {
    filtered = filtered.filter(log => log.moderator?._id === selectedLogModerator.value)
  }

  return filtered
})

const paginatedLogs = computed(() => {
  const start = (currentLogPage.value - 1) * logPageSize.value
  const end = start + logPageSize.value
  return filteredLogs.value.slice(start, end)
})

// Methods
const toast = useToast()

// Dummy handler for recent activity "View" button
const viewActivityDetails = (activity: Activity): void => {
  // You can implement navigation or modal logic here if needed
  toast.add({
    title: 'Activity Details',
    description: `Viewing details for: ${activity.title}`,
    color: 'info'
  })
}

const refreshData = async (): Promise<void> => {
  isRefreshing.value = true
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    // Refresh data here
  } finally {
    isRefreshing.value = false
  }
}

const resetReportFilters = (): void => {
  reportSearchQuery.value = ''
  selectedReportStatus.value = { label: 'All Status', value: '' }
  selectedReportType.value = { label: 'All Types', value: '' }
  reportSortBy.value = { label: 'Newest First', value: 'createdAt' }
}

const resetAppealFilters = (): void => {
  appealSearchQuery.value = ''
  selectedAppealStatus.value = { label: 'All Status', value: '' }
  selectedAppealType.value = { label: 'All Types', value: '' }
  appealSortBy.value = { label: 'Newest First', value: 'createdAt' }
}

const resetLogFilters = (): void => {
  logSearchQuery.value = ''
  selectedLogAction.value = ''
  selectedLogModerator.value = ''
  logTimeRange.value = '7d'
}

const reviewReport = (report: Report): void => {
  selectedReport.value = report
  showReportModal.value = true
}

const approveReport = async (report: Report): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    report.status = 'reviewed'
    report.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to approve report:', error)
  }
}

const rejectReport = async (report: Report): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    report.status = 'rejected'
    report.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to reject report:', error)
  }
}

const reviewAppeal = (appeal: Appeal): void => {
  selectedAppeal.value = appeal
  showAppealModal.value = true
}

const approveAppeal = async (appeal: Appeal): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    appeal.status = 'approved'
    appeal.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to approve appeal:', error)
  }
}

const rejectAppeal = async (appeal: Appeal): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    appeal.status = 'rejected'
    appeal.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to reject appeal:', error)
  }
}

const submitReportAction = async (): Promise<void> => {
  submittingReportAction.value = true

  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000))

    if (selectedReport.value) {
      selectedReport.value.status = 'reviewed'
      selectedReport.value.handledAt = new Date()
      selectedReport.value.note = reportActionForm.value.note
    }

    showReportModal.value = false

    // Reset form
    reportActionForm.value = {
      action: '',
      severity: '',
      note: ''
    }
  } catch (error) {
    console.error('Failed to submit report action:', error)
  } finally {
    submittingReportAction.value = false
  }
}

const reviewAIItem = (item: AIQueueItem): void => {
  selectedAIItem.value = item
  showAIReviewModal.value = true
}

const viewLogDetails = (log: ModerationLog): void => {
  selectedLog.value = log
  showLogDetailsModal.value = true
}

const submitAppealAction = async (): Promise<void> => {
  submittingAppealAction.value = true

  try {
    await new Promise(resolve => setTimeout(resolve, 2000))

    if (selectedAppeal.value) {
      selectedAppeal.value.status = appealActionForm.value.decision === 'approve' ? 'approved' : 'rejected'
      selectedAppeal.value.handledAt = new Date()
      selectedAppeal.value.responseMessage = appealActionForm.value.responseMessage
    }

    toast.add({
      title: 'Success',
      description: 'Appeal action submitted successfully',
      color: 'green'
    })

    showAppealModal.value = false

    appealActionForm.value = {
      decision: '',
      priority: '',
      responseMessage: ''
    }
  } catch {
    toast.add({
      title: 'Error',
      description: 'Failed to submit appeal action',
      color: 'error'
    })
  } finally {
    submittingAppealAction.value = false
  }
}

const submitBulkReportAction = async (): Promise<void> => {
  submittingBulkReportAction.value = true

  try {
    await new Promise(resolve => setTimeout(resolve, 2000))

    selectedReports.value.forEach((report) => {
      report.status = 'reviewed'
      report.handledAt = new Date()
      report.note = bulkReportForm.value.note
    })

    toast.add({
      title: 'Success',
      description: `Bulk action applied to ${selectedReports.value.length} reports`,
      color: 'success'
    })

    showBulkReportActions.value = false
    selectedReports.value = []

    bulkReportForm.value = {
      action: { label: '', value: '' },
      severity: { label: '', value: '' },
      note: ''
    }
  } catch {
    toast.add({
      title: 'Error',
      description: 'Failed to apply bulk action',
      color: 'error'
    })
  } finally {
    submittingBulkReportAction.value = false
  }
}

const submitAIReview = async (): Promise<void> => {
  submittingAIReview.value = true

  try {
    await new Promise(resolve => setTimeout(resolve, 2000))

    if (selectedAIItem.value) {
      selectedAIItem.value.status = aiReviewForm.value.decision === 'confirm' ? 'flagged' : 'approved'
    }

    toast.add({
      title: 'Success',
      description: 'AI review submitted successfully',
      color: 'green'
    })

    showAIReviewModal.value = false

    aiReviewForm.value = {
      decision: '',
      confidenceOverride: '',
      note: ''
    }
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to submit AI review',
      color: 'red'
    })
  } finally {
    submittingAIReview.value = false
  }
}

// Bulk action methods
const bulkApproveReports = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1500))
    const pendingReports = reports.value.filter(r => r.status === 'pending')
    pendingReports.forEach((report) => {
      report.status = 'reviewed'
      report.handledAt = new Date()
    })

    toast.add({
      title: 'Success',
      description: `${pendingReports.length} reports approved`,
      color: 'green'
    })

    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to bulk approve reports',
      color: 'red'
    })
  }
}

const bulkRejectReports = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1500))
    const spamReports = reports.value.filter(r => r.reason.toLowerCase().includes('spam'))
    spamReports.forEach((report) => {
      report.status = 'rejected'
      report.handledAt = new Date()
    })

    toast.add({
      title: 'Success',
      description: `${spamReports.length} spam reports rejected`,
      color: 'green'
    })

    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to bulk reject reports',
      color: 'red'
    })
  }
}

const exportAllReports = (): void => {
  toast.add({
    title: 'Export Started',
    description: 'Reports export is being prepared',
    color: 'blue'
  })
  showBulkActionsModal.value = false
}

const bulkProcessAppeals = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1500))
    const validAppeals = appeals.value.filter(a => a.status === 'pending' && a.reason.length > 50)
    validAppeals.forEach((appeal) => {
      appeal.status = 'approved'
      appeal.handledAt = new Date()
    })

    toast.add({
      title: 'Success',
      description: `${validAppeals.length} valid appeals processed`,
      color: 'green'
    })

    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to process appeals',
      color: 'red'
    })
  }
}

const bulkRejectAppeals = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1500))
    const invalidAppeals = appeals.value.filter(a => a.status === 'pending' && a.reason.length < 20)
    invalidAppeals.forEach((appeal) => {
      appeal.status = 'rejected'
      appeal.handledAt = new Date()
    })

    toast.add({
      title: 'Success',
      description: `${invalidAppeals.length} invalid appeals rejected`,
      color: 'green'
    })

    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to reject appeals',
      color: 'red'
    })
  }
}

const exportAllAppeals = (): void => {
  toast.add({
    title: 'Export Started',
    description: 'Appeals export is being prepared',
    color: 'blue'
  })
  showBulkActionsModal.value = false
}

const retrainAIModel = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 2000))
    toast.add({
      title: 'AI Model Retraining',
      description: 'AI model retraining has been initiated',
      color: 'purple'
    })
    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to initiate AI retraining',
      color: 'red'
    })
  }
}

const adjustAIThreshold = (): void => {
  toast.add({
    title: 'AI Threshold',
    description: 'AI threshold adjustment panel opened',
    color: 'orange'
  })
  showBulkActionsModal.value = false
}

const clearAIQueue = async (): Promise<void> => {
  try {
    await new Promise(resolve => setTimeout(resolve, 1000))
    aiQueueItems.value = []
    toast.add({
      title: 'Success',
      description: 'AI queue cleared successfully',
      color: 'green'
    })
    showBulkActionsModal.value = false
  } catch (error) {
    toast.add({
      title: 'Error',
      description: 'Failed to clear AI queue',
      color: 'red'
    })
  }
}

const getAppealActionColor = (actionType: string): string => {
  const colorMap: Record<string, string> = {
    reject: 'red',
    warning: 'yellow',
    flag: 'orange',
    hide: 'gray'
  }
  return colorMap[actionType] || 'gray'
}

// Add getTargetTypeBgColor for report target types
const getTargetTypeBgColor = (targetType: string): string => {
  switch (targetType) {
    case 'Novel':
      return 'bg-blue-100 dark:bg-blue-900/30'
    case 'Chapter':
      return 'bg-green-100 dark:bg-green-900/30'
    case 'Rate':
      return 'bg-yellow-100 dark:bg-yellow-900/30'
    default:
      return 'bg-slate-100 dark:bg-slate-800'
  }
}

// Add getActivityBgColor for recentActivities
const getActivityBgColor = (type: string): string => {
  switch (type) {
    case 'report':
      return 'bg-red-100 dark:bg-red-900/30'
    case 'appeal':
      return 'bg-blue-100 dark:bg-blue-900/30'
    case 'ai-flag':
      return 'bg-orange-100 dark:bg-orange-900/30'
    default:
      return 'bg-slate-100 dark:bg-slate-800'
  }
}

// Add getActivityIcon for recentActivities
const getActivityIcon = (type: string): string => {
  switch (type) {
    case 'report':
      return 'i-heroicons-flag'
    case 'appeal':
      return 'i-heroicons-scale'
    case 'ai-flag':
      return 'i-heroicons-cpu-chip'
    default:
      return 'i-heroicons-information-circle'
  }
}

// Optionally, add getActivityIconColor if needed
const getActivityIconColor = (type: string): string => {
  switch (type) {
    case 'report':
      return 'text-red-500'
    case 'appeal':
      return 'text-blue-500'
    case 'ai-flag':
      return 'text-orange-500'
    default:
      return 'text-slate-400'
  }
}

const formatDate = (date: Date | undefined): string => {
  if (!date) return 'N/A'
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date))
}

const formatTimeAgo = (date: Date): string => {
  const now = new Date()
  const diff = now.getTime() - new Date(date).getTime()
  const minutes = Math.floor(diff / 60000)
  const hours = Math.floor(minutes / 60)
  const days = Math.floor(hours / 24)

  if (days > 0) return `${days}d ago`
  if (hours > 0) return `${hours}h ago`
  if (minutes > 0) return `${minutes}m ago`
  return 'Just now'
}
const itemTabs = ref([
  {
    slot: 'dashboard',
    label: 'Dashboard',
    icon: 'i-heroicons-chart-pie'
  },
  {
    slot: 'reports',
    label: 'Reports',
    icon: 'i-heroicons-flag',
    badge: pendingReports.value
  },
  {
    slot: 'appeals',
    label: 'Appeals',
    icon: 'i-heroicons-scale',
    badge: pendingAppeals.value
  },
  {
    slot: 'ai-moderation',
    label: 'AI Moderation',
    icon: 'i-heroicons-cpu-chip',
    badge: aiModerationQueue.value
  },
  {
    slot: 'moderation-logs',
    label: 'Logs',
    icon: 'i-heroicons-document-text'
  }
])
// Lifecycle
onMounted(() => {
  reports.value = mockReports
  appeals.value = mockAppeals
  moderationLogs.value = mockModerationLogs
  aiQueueItems.value = mockAIQueueItems
})

// Watch for tab changes
watch(activeTab, (newTab) => {
  // Reset filters when switching tabs
  if (newTab === 'reports') {
    resetReportFilters()
  } else if (newTab === 'appeals') {
    resetAppealFilters()
  } else if (newTab === 'moderation-logs') {
    resetLogFilters()
  }
})

// Types
interface User {
  _id: string
  username: string
  email: string
  image?: string
  role: string
  violation: {
    count: number
    userReports: number
    modConfirmed: boolean
    details?: any
  }
}

interface Report {
  _id: string
  reporter: User
  targetType: 'Rate' | 'Novel' | 'Chapter'
  targetId: string
  reason: string
  status: 'pending' | 'reviewed' | 'rejected'
  moderator?: User
  handledAt?: Date
  note?: string
  createdAt: Date
  target?: any
}

interface Appeal {
  _id: string
  user: User
  novelId?: string
  chapterId?: string
  actionType: 'reject' | 'warning' | 'flag' | 'hide'
  reason: string
  status: 'pending' | 'approved' | 'rejected' | 'deleted'
  handledBy?: User
  responseMessage?: string
  handledAt?: Date
  createdAt: Date
  novel?: any
  chapter?: any
}

interface ModerationLog {
  _id: string
  novelId?: string
  chapterId?: string
  moderator?: User
  action: string
  note?: string
  details?: any
  isSystemAction: boolean
  createdAt: Date
  novel?: any
  chapter?: any
}

interface AIQueueItem {
  id: string
  type: 'novel' | 'chapter' | 'rate'
  title: string
  confidence: number
  status: 'processing' | 'flagged' | 'approved'
  createdAt: Date
}

interface ReportActionForm {
  action: string
  severity: string
  note: string
}

// Reactive state
const activeTab = ref<string>('dashboard')
const isRefreshing = ref<boolean>(false)

// Data
const reports = ref<Report[]>([])
const appeals = ref<Appeal[]>([])
const moderationLogs = ref<ModerationLog[]>([])
const aiQueueItems = ref<AIQueueItem[]>([])

// Search and filters
const reportSearchQuery = ref<string>('')
const selectedReportStatus = ref<string>('')
const selectedReportType = ref<string>('')
const reportSortBy = ref<string>('createdAt')

const appealSearchQuery = ref<string>('')
const selectedAppealStatus = ref<string>('')
const selectedAppealType = ref<string>('')
const appealSortBy = ref<string>('createdAt')

const logSearchQuery = ref<string>('')
const selectedLogAction = ref<string>('')
const selectedLogModerator = ref<string>('')
const logTimeRange = ref<string>('7d')

const chartTimeRange = ref<string>('30d')

// Modal states
const showReportModal = ref<boolean>(false)
const showAppealModal = ref<boolean>(false)
const showBulkActionsModal = ref<boolean>(false)
const showBulkReportActions = ref<boolean>(false)

// Selected items
const selectedReport = ref<Report | null>(null)
const selectedAppeal = ref<Appeal | null>(null)
const selectedReports = ref<Report[]>([])

// Loading states
const loadingReports = ref<boolean>(false)
const loadingAppeals = ref<boolean>(false)
const loadingLogs = ref<boolean>(false)
const refreshingAI = ref<boolean>(false)
const submittingReportAction = ref<boolean>(false)

// Pagination
const currentReportPage = ref<number>(1)
const reportPageSize = ref<number>(10)
const currentAppealPage = ref<number>(1)
const appealPageSize = ref<number>(10)
const currentLogPage = ref<number>(1)
const logPageSize = ref<number>(10)

// Forms
const reportActionForm = ref<ReportActionForm>({
  action: '',
  severity: '',
  note: ''
})

// Configuration
const mainTabs = computed(() => [
  { 
    key: 'dashboard', 
    label: 'Dashboard', 
    icon: 'i-heroicons-chart-pie'
  },
  { 
    key: 'reports', 
    label: 'Reports', 
    icon: 'i-heroicons-flag',
    badge: pendingReports.value
  },
  { 
    key: 'appeals', 
    label: 'Appeals', 
    icon: 'i-heroicons-scale',
    badge: pendingAppeals.value
  },
  { 
    key: 'ai-moderation', 
    label: 'AI Moderation', 
    icon: 'i-heroicons-cpu-chip',
    badge: aiModerationQueue.value
  },
  { 
    key: 'moderation-logs', 
    label: 'Logs', 
    icon: 'i-heroicons-document-text'
  }
])

const timeRangeOptions = [
  { label: 'Last 7 days', value: '7d' },
  { label: 'Last 30 days', value: '30d' },
  { label: 'Last 3 months', value: '3m' },
  { label: 'Last year', value: '1y' }
]

const reportStatusOptions = [
  { label: 'All Status', value: '' },
  { label: 'Pending', value: 'pending' },
  { label: 'Reviewed', value: 'reviewed' },
  { label: 'Rejected', value: 'rejected' }
]

const reportTypeOptions = [
  { label: 'All Types', value: '' },
  { label: 'Novel', value: 'Novel' },
  { label: 'Chapter', value: 'Chapter' },
  { label: 'Rate', value: 'Rate' }
]

const reportSortOptions = [
  { label: 'Newest First', value: 'createdAt' },
  { label: 'Oldest First', value: 'createdAt_asc' },
  { label: 'Priority', value: 'priority' }
]

const appealStatusOptions = [
  { label: 'All Status', value: '' },
  { label: 'Pending', value: 'pending' },
  { label: 'Approved', value: 'approved' },
  { label: 'Rejected', value: 'rejected' },
  { label: 'Deleted', value: 'deleted' }
]

const appealTypeOptions = [
  { label: 'All Types', value: '' },
  { label: 'Reject', value: 'reject' },
  { label: 'Warning', value: 'warning' },
  { label: 'Flag', value: 'flag' },
  { label: 'Hide', value: 'hide' }
]

const appealSortOptions = [
  { label: 'Newest First', value: 'createdAt' },
  { label: 'Oldest First', value: 'createdAt_asc' },
  { label: 'Priority', value: 'priority' }
]

const logActionOptions = [
  { label: 'All Actions', value: '' },
  { label: 'Approve', value: 'approve' },
  { label: 'Reject', value: 'reject' },
  { label: 'Warning', value: 'warning' },
  { label: 'Hide', value: 'hide' },
  { label: 'Flag', value: 'flag' }
]

const moderatorOptions = computed(() => {
  const moderators = [...new Set(moderationLogs.value.map(log => log.moderator).filter(Boolean))]
  return [
    { label: 'All Moderators', value: '' },
    ...moderators.map(mod => ({ label: mod!.username, value: mod!._id }))
  ]
})

const reportActionOptions = [
  { label: 'Approve Report', value: 'approve' },
  { label: 'Reject Report', value: 'reject' },
  { label: 'Flag Content', value: 'flag' },
  { label: 'Hide Content', value: 'hide' },
  { label: 'Warning', value: 'warning' }
]

const severityOptions = [
  { label: 'Low', value: 'low' },
  { label: 'Medium', value: 'medium' },
  { label: 'High', value: 'high' },
  { label: 'Critical', value: 'critical' }
]

// Table columns
const reportColumns = [
  { key: 'reporter', label: 'Reporter' },
  { key: 'target', label: 'Target Content' },
  { key: 'reason', label: 'Reason' },
  { key: 'status', label: 'Status' },
  { key: 'createdAt', label: 'Date' },
  { key: 'actions', label: 'Actions' }
]

const appealColumns = [
  { key: 'user', label: 'User' },
  { key: 'content', label: 'Content' },
  { key: 'reason', label: 'Appeal Reason' },
  { key: 'status', label: 'Status' },
  { key: 'handledBy', label: 'Handled By' },
  { key: 'createdAt', label: 'Date' },
  { key: 'actions', label: 'Actions' }
]

const logColumns = [
  { key: 'action', label: 'Action' },
  { key: 'target', label: 'Target' },
  { key: 'moderator', label: 'Moderator' },
  { key: 'note', label: 'Note' },
  { key: 'createdAt', label: 'Date' },
  { key: 'actions', label: 'Actions' }
]

// Mock data
const mockReports: Report[] = [
  {
    _id: '1',
    reporter: {
      _id: 'u1',
      username: 'user123',
      email: 'user123@example.com',
      role: 'user',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    targetType: 'Novel',
    targetId: 'n1',
    reason: 'This novel contains inappropriate content that violates community guidelines.',
    status: 'pending',
    createdAt: new Date('2024-01-15'),
    target: {
      title: 'The Legendary Sword Master',
      content: 'An epic tale of adventure...'
    }
  },
  {
    _id: '2',
    reporter: {
      _id: 'u2',
      username: 'moderator1',
      email: 'mod1@example.com',
      role: 'moderator',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    targetType: 'Chapter',
    targetId: 'c1',
    reason: 'Chapter contains spam content and irrelevant information.',
    status: 'reviewed',
    moderator: {
      _id: 'm1',
      username: 'admin1',
      email: 'admin1@example.com',
      role: 'admin',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    handledAt: new Date('2024-01-16'),
    note: 'Content reviewed and action taken.',
    createdAt: new Date('2024-01-14'),
    target: {
      title: 'Chapter 1: The Beginning',
      content: 'In a small village nestled at the foot of the mountains...'
    }
  }
]

const mockAppeals: Appeal[] = [
  {
    _id: '1',
    user: {
      _id: 'u3',
      username: 'author1',
      email: 'author1@example.com',
      role: 'user',
      violation: { count: 2, userReports: 1, modConfirmed: true }
    },
    novelId: 'n1',
    actionType: 'reject',
    reason: 'I believe my novel was wrongly rejected. The content follows all community guidelines and does not contain any inappropriate material.',
    status: 'pending',
    createdAt: new Date('2024-01-16'),
    novel: {
      title: 'The Magical World Chronicles',
      description: 'A fantasy adventure story...'
    }
  },
  {
    _id: '2',
    user: {
      _id: 'u4',
      username: 'writer2',
      email: 'writer2@example.com',
      role: 'user',
      violation: { count: 1, userReports: 0, modConfirmed: false }
    },
    chapterId: 'c2',
    actionType: 'warning',
    reason: 'The warning issued for this chapter seems unfair. I have reviewed the content and made necessary changes.',
    status: 'approved',
    handledBy: {
      _id: 'm2',
      username: 'moderator2',
      email: 'mod2@example.com',
      role: 'moderator',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    responseMessage: 'Appeal approved. Warning has been removed.',
    handledAt: new Date('2024-01-17'),
    createdAt: new Date('2024-01-15'),
    chapter: {
      title: 'Chapter 5: The Great Battle',
      content: 'The battle raged on...'
    }
  }
]

const mockModerationLogs: ModerationLog[] = [
  {
    _id: '1',
    novelId: 'n1',
    moderator: {
      _id: 'm1',
      username: 'admin1',
      email: 'admin1@example.com',
      role: 'admin',
      violation: { count: 0, userReports: 0, modConfirmed: false }
    },
    action: 'approve',
    note: 'Content meets community standards.',
    isSystemAction: false,
    createdAt: new Date('2024-01-16'),
    novel: {
      title: 'The Legendary Sword Master'
    }
  },
  {
    _id: '2',
    chapterId: 'c1',
    action: 'flag',
    note: 'AI detected potential policy violation.',
    details: { confidence: 0.85, violationType: 'inappropriate_content' },
    isSystemAction: true,
    createdAt: new Date('2024-01-15'),
    chapter: {
      title: 'Chapter 1: The Beginning'
    }
  }
]

const mockAIQueueItems: AIQueueItem[] = [
  {
    id: '1',
    type: 'novel',
    title: 'The Dark Chronicles',
    confidence: 92,
    status: 'flagged',
    createdAt: new Date('2024-01-16')
  },
  {
    id: '2',
    type: 'chapter',
    title: 'Chapter 3: The Forbidden Magic',
    confidence: 78,
    status: 'processing',
    createdAt: new Date('2024-01-16')
  }
]

// Computed properties
const breadcrumbLinks = computed(() => {
  const links = [{ label: 'Dashboard', to: '/' }]
  
  if (activeTab.value === 'dashboard') {
    links.push({ label: 'Violation Management' })
  } else if (activeTab.value === 'reports') {
    links.push({ label: 'Reports Management' })
  } else if (activeTab.value === 'appeals') {
    links.push({ label: 'Appeals Management' })
  } else if (activeTab.value === 'ai-moderation') {
    links.push({ label: 'AI Moderation' })
  } else if (activeTab.value === 'moderation-logs') {
    links.push({ label: 'Moderation Logs' })
  }
  
  return links
})

// Statistics
const pendingReports = computed(() => reports.value.filter(r => r.status === 'pending').length)
const pendingAppeals = computed(() => appeals.value.filter(a => a.status === 'pending').length)
const aiModerationQueue = computed(() => aiQueueItems.value.filter(item => item.status === 'processing').length)

const totalReports = computed(() => reports.value.length)
const totalAppeals = computed(() => appeals.value.length)
const totalViolations = computed(() => 156) // Mock data
const moderationEfficiency = computed(() => 94) // Mock data
const aiProcessingRate = computed(() => 45) // Mock data
const aiAccuracy = computed(() => 87) // Mock data
const aiFalsePositives = computed(() => 13) // Mock data

const keyMetrics = computed(() => [
  {
    key: 'total-reports',
    label: 'Total Reports',
    value: totalReports.value,
    icon: 'i-heroicons-flag',
    bgColor: 'bg-red-100 dark:bg-red-900/30',
    iconColor: 'text-red-600',
    progressColor: 'bg-red-500',
    progress: 100,
    trend: 'up',
    change: 15
  },
  {
    key: 'pending-reports',
    label: 'Pending Reports',
    value: pendingReports.value,
    icon: 'i-heroicons-clock',
    bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
    iconColor: 'text-yellow-600',
    progressColor: 'bg-yellow-500',
    progress: (pendingReports.value / totalReports.value) * 100,
    trend: 'down',
    change: 8
  },
  {
    key: 'total-appeals',
    label: 'Total Appeals',
    value: totalAppeals.value,
    icon: 'i-heroicons-scale',
    bgColor: 'bg-blue-100 dark:bg-blue-900/30',
    iconColor: 'text-blue-600',
    progressColor: 'bg-blue-500',
    progress: 100,
    trend: 'up',
    change: 12
  },
  {
    key: 'violations',
    label: 'Total Violations',
    value: totalViolations.value,
    icon: 'i-heroicons-exclamation-triangle',
    bgColor: 'bg-orange-100 dark:bg-orange-900/30',
    iconColor: 'text-orange-600',
    progressColor: 'bg-orange-500',
    progress: 100,
    trend: 'down',
    change: 5
  }
])

const efficiencyBreakdown = computed(() => [
  {
    key: 'response-time',
    label: 'Response Time',
    percentage: 92,
    color: 'bg-emerald-500'
  },
  {
    key: 'accuracy',
    label: 'Decision Accuracy',
    percentage: 96,
    color: 'bg-blue-500'
  },
  {
    key: 'user-satisfaction',
    label: 'User Satisfaction',
    percentage: 89,
    color: 'bg-purple-500'
  }
])

const recentActivities = computed(() => [
  {
    id: '1',
    type: 'report',
    title: 'New report submitted',
    description: 'User reported inappropriate content in "The Dark Chronicles"',
    status: 'pending',
    timestamp: new Date('2024-01-16T10:30:00')
  },
  {
    id: '2',
    type: 'appeal',
    title: 'Appeal approved',
    description: 'Appeal for "Chapter 5: The Great Battle" has been approved',
    status: 'approved',
    timestamp: new Date('2024-01-16T09:15:00')
  },
  {
    id: '3',
    type: 'ai-flag',
    title: 'AI flagged content',
    description: 'AI system flagged potential violation in new chapter',
    status: 'flagged',
    timestamp: new Date('2024-01-16T08:45:00')
  }
])

// Filtered data
const filteredReports = computed(() => {
  let filtered = [...reports.value]

  if (reportSearchQuery.value) {
    const query = reportSearchQuery.value.toLowerCase()
    filtered = filtered.filter(report =>
      report.reason.toLowerCase().includes(query) ||
      report.reporter.username.toLowerCase().includes(query) ||
      (report.target?.title && report.target.title.toLowerCase().includes(query))
    )
  }

  if (selectedReportStatus.value) {
    filtered = filtered.filter(report => report.status === selectedReportStatus.value)
  }

  if (selectedReportType.value) {
    filtered = filtered.filter(report => report.targetType === selectedReportType.value)
  }

  // Sorting
  filtered.sort((a, b) => {
    switch (reportSortBy.value) {
      case 'createdAt':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'createdAt_asc':
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      default:
        return 0
    }
  })

  return filtered
})

const paginatedReports = computed(() => {
  const start = (currentReportPage.value - 1) * reportPageSize.value
  const end = start + reportPageSize.value
  return filteredReports.value.slice(start, end)
})

const filteredAppeals = computed(() => {
  let filtered = [...appeals.value]

  if (appealSearchQuery.value) {
    const query = appealSearchQuery.value.toLowerCase()
    filtered = filtered.filter(appeal =>
      appeal.reason.toLowerCase().includes(query) ||
      appeal.user.username.toLowerCase().includes(query) ||
      (appeal.novel?.title && appeal.novel.title.toLowerCase().includes(query)) ||
      (appeal.chapter?.title && appeal.chapter.title.toLowerCase().includes(query))
    )
  }

  if (selectedAppealStatus.value) {
    filtered = filtered.filter(appeal => appeal.status === selectedAppealStatus.value)
  }

  if (selectedAppealType.value) {
    filtered = filtered.filter(appeal => appeal.actionType === selectedAppealType.value)
  }

  // Sorting
  filtered.sort((a, b) => {
    switch (appealSortBy.value) {
      case 'createdAt':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'createdAt_asc':
        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      default:
        return 0
    }
  })

  return filtered
})

const paginatedAppeals = computed(() => {
  const start = (currentAppealPage.value - 1) * appealPageSize.value
  const end = start + appealPageSize.value
  return filteredAppeals.value.slice(start, end)
})

const filteredLogs = computed(() => {
  let filtered = [...moderationLogs.value]

  if (logSearchQuery.value) {
    const query = logSearchQuery.value.toLowerCase()
    filtered = filtered.filter(log =>
      log.action.toLowerCase().includes(query) ||
      (log.moderator?.username && log.moderator.username.toLowerCase().includes(query)) ||
      (log.note && log.note.toLowerCase().includes(query))
    )
  }

  if (selectedLogAction.value) {
    filtered = filtered.filter(log => log.action === selectedLogAction.value)
  }

  if (selectedLogModerator.value) {
    filtered = filtered.filter(log => log.moderator?._id === selectedLogModerator.value)
  }

  return filtered
})

const paginatedLogs = computed(() => {
  const start = (currentLogPage.value - 1) * logPageSize.value
  const end = start + logPageSize.value
  return filteredLogs.value.slice(start, end)
})

// Methods
const refreshData = async (): Promise<void> => {
  isRefreshing.value = true
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    // Refresh data here
  } finally {
    isRefreshing.value = false
  }
}

const resetReportFilters = (): void => {
  reportSearchQuery.value = ''
  selectedReportStatus.value = ''
  selectedReportType.value = ''
  reportSortBy.value = 'createdAt'
}

const resetAppealFilters = (): void => {
  appealSearchQuery.value = ''
  selectedAppealStatus.value = ''
  selectedAppealType.value = ''
  appealSortBy.value = 'createdAt'
}

const resetLogFilters = (): void => {
  logSearchQuery.value = ''
  selectedLogAction.value = ''
  selectedLogModerator.value = ''
  logTimeRange.value = '7d'
}

const reviewReport = (report: Report): void => {
  selectedReport.value = report
  showReportModal.value = true
}

const approveReport = async (report: Report): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    report.status = 'reviewed'
    report.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to approve report:', error)
  }
}

const rejectReport = async (report: Report): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    report.status = 'rejected'
    report.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to reject report:', error)
  }
}

const reviewAppeal = (appeal: Appeal): void => {
  selectedAppeal.value = appeal
  showAppealModal.value = true
}

const approveAppeal = async (appeal: Appeal): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    appeal.status = 'approved'
    appeal.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to approve appeal:', error)
  }
}

const rejectAppeal = async (appeal: Appeal): Promise<void> => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    appeal.status = 'rejected'
    appeal.handledAt = new Date()
    // Show success notification
  } catch (error) {
    console.error('Failed to reject appeal:', error)
  }
}

const submitReportAction = async (): Promise<void> => {
  submittingReportAction.value = true
  
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    if (selectedReport.value) {
      selectedReport.value.status = 'reviewed'
      selectedReport.value.handledAt = new Date()
      selectedReport.value.note = reportActionForm.value.note
    }
    
    showReportModal.value = false
    
    // Reset form
    reportActionForm.value = {
      action: '',
      severity: '',
      note: ''
    }
    
  } catch (error) {
    console.error('Failed to submit report action:', error)
  } finally {
    submittingReportAction.value = false
  }
}

const refreshAIQueue = async (): Promise<void> => {
  refreshingAI.value = true
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    // Refresh AI queue data
  } finally {
    refreshingAI.value = false
  }
}

const reviewAIItem = (item: AIQueueItem): void => {
  console.log('Review AI item:', item)
  // Implement AI item review
}

const viewActivityDetails = (activity: any): void => {
  console.log('View activity details:', activity)
  // Implement activity details view
}

const viewLogDetails = (log: ModerationLog): void => {
  console.log('View log details:', log)
  // Implement log details view
}

const exportReports = (): void => {
  console.log('Exporting reports...')
  // Implement reports export
}

const exportAppeals = (): void => {
  console.log('Exporting appeals...')
  // Implement appeals export
}

const exportLogs = (): void => {
  console.log('Exporting logs...')
  // Implement logs export
}

// Action getters
const getReportActions = (report: Report) => {
  const actions = []
  
  actions.push([{
    label: 'View Details',
    icon: 'i-heroicons-eye',
    click: () => reviewReport(report)
  }])
  
  if (report.status === 'pending') {
    actions.push([{
      label: 'Approve',
      icon: 'i-heroicons-check',
      click: () => approveReport(report)
    }])
    
    actions.push([{
      label: 'Reject',
      icon: 'i-heroicons-x-mark',
      click: () => rejectReport(report)
    }])
  }
  
  return actions
}

const getAppealActions = (appeal: Appeal) => {
  const actions = []
  
  actions.push([{
    label: 'View Details',
    icon: 'i-heroicons-eye',
    click: () => reviewAppeal(appeal)
  }])
  
  if (appeal.status === 'pending') {
    actions.push([{
      label: 'Approve',
      icon: 'i-heroicons-check',
      click: () => approveAppeal(appeal)
    }])
    
    actions.push([{
      label: 'Reject',
      icon: 'i-heroicons-x-mark',
      click: () => rejectAppeal(appeal)
    }])
  }
  
  return actions
}

const getLogActions = (log: ModerationLog) => {
  return [
    [{
      label: 'View Details',
      icon: 'i-heroicons-eye',
      click: () => viewLogDetails(log)
    }]
  ]
}

// Utility functions
const getStatusLabel = (status: string): string => {
  const statusMap: Record<string, string> = {
    pending: 'Pending',
    reviewed: 'Reviewed',
    rejected: 'Rejected',
    approved: 'Approved',
    deleted: 'Deleted',
    flagged: 'Flagged',
    processing: 'Processing'
  }
  return statusMap[status] || status
}

const getStatusColor = (status: string): string => {
  const colorMap: Record<string, string> = {
    pending: 'yellow',
    reviewed: 'green',
    rejected: 'red',
    approved: 'green',
    deleted: 'gray',
    flagged: 'red',
    processing: 'blue'
  }
  return colorMap[status] || 'gray'
}

const getStatusDotColor = (status: string): string => {
  const colorMap: Record<string, string> = {
    pending: 'bg-yellow-400',
    reviewed: 'bg-green-400',
    rejected: 'bg-red-400',
    approved: 'bg-green-400',
    deleted: 'bg-gray-400',
    flagged: 'bg-red-400',
    processing: 'bg-blue-400'
  }
  return colorMap[status] || 'bg-gray-400'
}

const getTargetTypeIcon = (type: string): string => {
  const iconMap: Record<string, string> = {
    Novel: 'i-heroicons-book-open',
    Chapter: 'i-heroicons-document-text',
    Rate: 'i-heroicons-star'
  }
  return iconMap[type] || 'i-heroicons-document'
}

const getTargetTypeBgColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    Novel: 'bg-blue-100 dark:bg-blue-900/30',
    Chapter: 'bg-green-100 dark:bg-green-900/30',
    Rate: 'bg-yellow-100 dark:bg-yellow-900/30'
  }
  return colorMap[type] || 'bg-gray-100 dark:bg-gray-800'
}

const getTargetTypeIconColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    Novel: 'text-blue-600',
    Chapter: 'text-green-600',
    Rate: 'text-yellow-600'
  }
  return colorMap[type] || 'text-gray-600'
}

const getTargetTitle = (report: Report): string => {
  return report.target?.title || `${report.targetType} Content`
}

const getTargetContent = (report: Report): string => {
  return report.target?.content || report.target?.description || 'Content not available'
}

const getAppealContentIcon = (actionType: string): string => {
  const iconMap: Record<string, string> = {
    reject: 'i-heroicons-x-circle',
    warning: 'i-heroicons-exclamation-triangle',
    flag: 'i-heroicons-flag',
    hide: 'i-heroicons-eye-slash'
  }
  return iconMap[actionType] || 'i-heroicons-document'
}

const getAppealContentBgColor = (actionType: string): string => {
  const colorMap: Record<string, string> = {
    reject: 'bg-red-100 dark:bg-red-900/30',
    warning: 'bg-yellow-100 dark:bg-yellow-900/30',
    flag: 'bg-orange-100 dark:bg-orange-900/30',
    hide: 'bg-gray-100 dark:bg-gray-800'
  }
  return colorMap[actionType] || 'bg-gray-100 dark:bg-gray-800'
}

const getAppealContentIconColor = (actionType: string): string => {
  const colorMap: Record<string, string> = {
    reject: 'text-red-600',
    warning: 'text-yellow-600',
    flag: 'text-orange-600',
    hide: 'text-gray-600'
  }
  return colorMap[actionType] || 'text-gray-600'
}

const getAppealContentTitle = (appeal: Appeal): string => {
  if (appeal.novel) return appeal.novel.title
  if (appeal.chapter) return appeal.chapter.title
  return `${appeal.actionType} Appeal`
}

const getActivityIcon = (type: string): string => {
  const iconMap: Record<string, string> = {
    report: 'i-heroicons-flag',
    appeal: 'i-heroicons-scale',
    'ai-flag': 'i-heroicons-cpu-chip',
    moderation: 'i-heroicons-shield-check'
  }
  return iconMap[type] || 'i-heroicons-bell'
}

const getActivityBgColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    report: 'bg-red-100 dark:bg-red-900/30',
    appeal: 'bg-blue-100 dark:bg-blue-900/30',
    'ai-flag': 'bg-purple-100 dark:bg-purple-900/30',
    moderation: 'bg-green-100 dark:bg-green-900/30'
  }
  return colorMap[type] || 'bg-gray-100 dark:bg-gray-800'
}

const getActivityIconColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    report: 'text-red-600',
    appeal: 'text-blue-600',
    'ai-flag': 'text-purple-600',
    moderation: 'text-green-600'
  }
  return colorMap[type] || 'text-gray-600'
}

const getAIItemIcon = (type: string): string => {
  const iconMap: Record<string, string> = {
    novel: 'i-heroicons-book-open',
    chapter: 'i-heroicons-document-text',
    rate: 'i-heroicons-star'
  }
  return iconMap[type] || 'i-heroicons-document'
}

const getAIItemBgColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    novel: 'bg-blue-100 dark:bg-blue-900/30',
    chapter: 'bg-green-100 dark:bg-green-900/30',
    rate: 'bg-yellow-100 dark:bg-yellow-900/30'
  }
  return colorMap[type] || 'bg-gray-100 dark:bg-gray-800'
}

const getAIItemIconColor = (type: string): string => {
  const colorMap: Record<string, string> = {
    novel: 'text-blue-600',
    chapter: 'text-green-600',
    rate: 'text-yellow-600'
  }
  return colorMap[type] || 'text-gray-600'
}

const getAIStatusColor = (status: string): string => {
  const colorMap: Record<string, string> = {
    processing: 'blue',
    flagged: 'red',
    approved: 'green'
  }
  return colorMap[status] || 'gray'
}

const getActionIcon = (action: string): string => {
  const iconMap: Record<string, string> = {
    approve: 'i-heroicons-check-circle',
    reject: 'i-heroicons-x-circle',
    warning: 'i-heroicons-exclamation-triangle',
    hide: 'i-heroicons-eye-slash',
    flag: 'i-heroicons-flag'
  }
  return iconMap[action] || 'i-heroicons-cog'
}

const getActionBgColor = (action: string): string => {
  const colorMap: Record<string, string> = {
    approve: 'bg-green-100 dark:bg-green-900/30',
    reject: 'bg-red-100 dark:bg-red-900/30',
    warning: 'bg-yellow-100 dark:bg-yellow-900/30',
    hide: 'bg-gray-100 dark:bg-gray-800',
    flag: 'bg-orange-100 dark:bg-orange-900/30'
  }
  return colorMap[action] || 'bg-gray-100 dark:bg-gray-800'
}

const getActionIconColor = (action: string): string => {
  const colorMap: Record<string, string> = {
    approve: 'text-green-600',
    reject: 'text-red-600',
    warning: 'text-yellow-600',
    hide: 'text-gray-600',
    flag: 'text-orange-600'
  }
  return colorMap[action] || 'text-gray-600'
}

const getActionLabel = (action: string): string => {
  const labelMap: Record<string, string> = {
    approve: 'Approved',
    reject: 'Rejected',
    warning: 'Warning Issued',
    hide: 'Content Hidden',
    flag: 'Content Flagged'
  }
  return labelMap[action] || action
}

const getLogTargetTitle = (log: ModerationLog): string => {
  if (log.novel) return log.novel.title
  if (log.chapter) return log.chapter.title
  return 'Unknown Target'
}

const getLogTargetType = (log: ModerationLog): string => {
  if (log.novelId) return 'Novel'
  if (log.chapterId) return 'Chapter'
  return 'Unknown'
}

const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date))
}

const formatTimeAgo = (date: Date): string => {
  const now = new Date()
  const diff = now.getTime() - new Date(date).getTime()
  const minutes = Math.floor(diff / 60000)
  const hours = Math.floor(minutes / 60)
  const days = Math.floor(hours / 24)

  if (days > 0) return `${days}d ago`
  if (hours > 0) return `${hours}h ago`
  if (minutes > 0) return `${minutes}m ago`
  return 'Just now'
}

// Lifecycle
onMounted(() => {
  reports.value = mockReports
  appeals.value = mockAppeals
  moderationLogs.value = mockModerationLogs
  aiQueueItems.value = mockAIQueueItems
})

// Watch for tab changes
watch(activeTab, (newTab) => {
  // Reset filters when switching tabs
  if (newTab === 'reports') {
    resetReportFilters()
  } else if (newTab === 'appeals') {
    resetAppealFilters()
  } else if (newTab === 'moderation-logs') {
    resetLogFilters()
  }
})
</script>


<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-4 {
  display: -webkit-box;
  -webkit-line-clamp: 4;
  line-clamp: 4;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: rgba(156, 163, 175, 0.5);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(156, 163, 175, 0.7);
}

.dark ::-webkit-scrollbar-thumb {
  background: rgba(75, 85, 99, 0.5);
}

.dark ::-webkit-scrollbar-thumb:hover {
  background: rgba(75, 85, 99, 0.7);
}

/* Smooth transitions */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

/* Glass effect for header */
.backdrop-blur-xl {
  backdrop-filter: blur(24px);
}

/* Gradient text */
.bg-clip-text {
  -webkit-background-clip: text;
  background-clip: text;
}

/* Custom animations */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

/* Enhanced focus states */
.focus\:ring-2:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
  box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.5);
}

/* Custom gradient backgrounds */
.bg-gradient-to-r {
  background-image: linear-gradient(to right, var(--tw-gradient-stops));
}

.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}
</style>
