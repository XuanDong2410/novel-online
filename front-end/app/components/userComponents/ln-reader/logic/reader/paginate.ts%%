import { nodeIsText } from "../node-is-text"

import { nodeIsEmpty } from "./node-empty"

// const childNodes= Array.from(virtualWrap.childNodes)

// autoWrapText(childNodes, wrap)

// const EMPTY_ARRAY = import.meta.env.DEV ? Object.freeze([]) : []

// eslint-disable-next-line functional/no-mixed-types
type IterableNode = Iterable<{
  readonly node: Node
  readonly done?: () => void
}>

const excludeSplitNodes = new Set(["svg", "video", "audio", "figure"])
const hiddenNodes = new Set(["style", "link", "meta"])

const wrapRootNotEmptyStore = new WeakSet<HTMLElement>()
// off net
function autoWrapText(
  childNodes: IterableNode,
  wrap: HTMLElement,
  wrapRoot = wrap
) {
  for (const { node, done } of childNodes) {
    if (hiddenNodes.has(node.nodeName.toLowerCase())) {
      wrap.appendChild(node)
      continue
    }

    if (node.nodeName.toUpperCase() === "IMG") {
      if (!wrapRootNotEmptyStore.has(wrapRoot)) {
        ;(node as HTMLImageElement).style.maxHeight = "100%"
        ;(node as HTMLImageElement).style.maxWidth = "100%"
        wrap.appendChild(node)
        wrapRootNotEmptyStore.add(wrapRoot)
        // don't remove because node moved to new wrap
        // node.parentNode?.removeChild(node)
      } else {
        console.warn("Break trace because node is image")
      }
      return 0xffff
    }
    const noSplitNode = excludeSplitNodes.has(node.nodeName.toLowerCase())
    const hasImg = (node as HTMLElement).querySelector?.("img")
    const canEach = !noSplitNode && node.childNodes?.length > 0

    // if (noSplitNode) {
    //   wrap.appendChild(node.cloneNode(true))
    //   continue
    // }
    if (canEach && hasImg) {
      if (eachChild(node, wrap, wrapRoot)) break
      else continue
    }

    const nodeClone = node.cloneNode(true)
    // check first node filler !== newline
    // if wrap empty and (isText ? check text empty : (not is node s and node text empty))
    // if (
    //   !wrapRootNotEmptyStore.has(wrapRoot) &&
    //   (nodeIsText(node)
    //     ? !node.nodeValue?.trim()
    //     : !noSplitNode && !(node as HTMLElement).innerText?.trim())
    // ) {
    //   continue
    // }
    wrap.appendChild(nodeClone)

    if (wrapRoot.scrollHeight > wrapRoot.clientHeight) {
      wrap.removeChild(nodeClone)

      if (canEach) {
        if (eachChild(node, wrap, wrapRoot)) break
        else continue
      }

      // MARK: Node is high because node empty but full height ->  style height
      if (
        (noSplitNode || nodeIsEmpty(node)) &&
        node.nodeType === Node.ELEMENT_NODE
      ) {
        // if (node.nodeType === Node.ELEMENT_NODE) {
        ;(node as HTMLElement).style.maxHeight += "; max-height: 100%"
        // } else {
        //   const wrap = document.createElement("div")
        //   wrap.style.maxHeight = "100%"

        //   const parent = node.parentNode
        //   const afterElement = node.nextSibling
        //   wrap.appendChild(node)
        //   parent?.insertBefore(wrap, afterElement)
        // }

        if (!wrapRootNotEmptyStore.has(wrapRoot)) {
          wrap.appendChild(node)
          wrapRootNotEmptyStore.add(wrapRoot)
        }

        break // break element because full height
      }

      const isTextNode = nodeIsText(node)
      if (isTextNode && storeTextNodeQuark.has(node)) {
        /// //////////////////
        console.log("Break trace element by is text node quark")
        break
      }

      // const nodeCloned = isTextNode
      //   ? document.createElement("div")
      //   : (node.cloneNode(false) as HTMLElement)
      // wrap.appendChild(nodeCloned)

      // analyticsNode(nodeCloned, wrapRoot, getChildNodesIterator(node))

      // if (nodeIsEmpty(node))console.log("called this")
      // if (nodeIsEmpty(nodeCloned)) console.log("called this")

      // console.log("breaked by index %o on total %o", node, childNodes)
      console.warn("This logic disabled.")
      break
    } else {
      node.parentNode?.removeChild(node) // .remove()
      done?.()
      if (
        nodeIsText(node)
          ? node.nodeValue?.trim()
          : noSplitNode || (node as HTMLElement).innerText?.trim()
      )
        // node empty child because check on before
        wrapRootNotEmptyStore.add(wrapRoot)
    }
  }
}

function eachChild(node: Node, wrap: Node, wrapRoot: HTMLElement) {
  const clone = node.cloneNode(false) as HTMLElement
  wrap.appendChild(clone)

  const breakedByImage =
    autoWrapText(getChildNodesIterator(node), clone, wrapRoot) === 0xffff

  // console.log(
  //   "out task = ",
  //   node.outerHTML,
  //   " child = ",
  //   [...node.childNodes].map((item) => item.cloneNode(true))
  // )
  if (nodeIsEmpty(node)) {
    // remove node
    node.parentNode?.removeChild(node)
    // console.log("removed", node.cloneNode(true))
  }

  // if clone not change height and clone is empty -> remove clone. ignore element set height
  if (clone.clientHeight === 0 && nodeIsEmpty(clone)) wrap.removeChild(clone)

  if (breakedByImage) return true

  return false
}

function analyticsNode(
  node: HTMLElement,
  wrapRoot: HTMLElement,
  childNodes: IterableNode
): void {
  if (node.nodeName === "IMG") {
    console.warn("Break trace because node is image")
    return
  }

  autoWrapText(childNodes, node, wrapRoot)
}

const storeTextNodeQuark = new WeakSet<Text>()
// function getChildNodes(node: Node) {
//   const isTextNode = nodeIsText(node)

//   return (isTextNode ? [node] : Array.from(node.childNodes))
//     .map((node): Node | Node[] => {
//       if (nodeIsText(node)) {
//         // return text node []

//         return (
//           (node as Text).nodeValue?.split(" ").map((word) => {
//             const textNode = document.createTextNode(word + " ")
//             storeTextNodeQuark.add(textNode)
//             return textNode
//           }) || (EMPTY_ARRAY as unknown as Node[])
//         )
//       }

//       return node
//     })
//     .flat(1)
// }
function* getChildNodesIterator(node: Node): IterableNode {
  const isTextNode = nodeIsText(node)

  if (isTextNode) {
    yield { node }
  } else {
    const childNodes = Array.from(node.childNodes)
    for (let i = 0; i < childNodes.length; i++) {
      const nodeChild = childNodes[i]

      if (!nodeIsText(nodeChild)) {
        yield { node: nodeChild }
      } else {
        let { nodeValue } = nodeChild

        if (!nodeValue) continue // empty

        while (nodeValue) {
          const spaceIndex = nodeValue.indexOf(" ")

          if (spaceIndex === -1) {
            const textNode = document.createTextNode(nodeChild.nodeValue + " ")
            storeTextNodeQuark.add(textNode)
            nodeValue = ""
            yield {
              node: textNode,
              done: () => (nodeChild.nodeValue = nodeValue)
            }
          } else {
            const textNode = document.createTextNode(
              nodeValue.slice(0, spaceIndex) + " "
            )
            storeTextNodeQuark.add(textNode)
            nodeValue = nodeValue.slice(spaceIndex + 1)
            yield {
              node: textNode,
              done: () => (nodeChild.nodeValue = nodeValue)
            }
          }
        }
      }
    }
  }
}

export function createVirtualWrap(html: string) {
  const virtualWrap = document.createElement("div")
  virtualWrap.innerHTML = html

  return virtualWrap
}

// const wrap = document.createElement("div")
// wrap.id = "append-body"
// Object.assign(wrap.style, {
//   position: "fixed",
//   top: "0",
//   left: 0,
//   width: "100%",
//   height: "100%",
//   background: "black",
//   zIndex: 99999
// })
// document.body.appendChild(wrap)
export async function paginateHtml(
  wrap: HTMLElement,
  virtualWrap: HTMLDivElement
) {
  const r = analyticsNode(wrap, wrap, getChildNodesIterator(virtualWrap))

  wrapRootNotEmptyStore.delete(wrap)
  return r
}

// import html2canvas from "html2canvas"

// html2canvas(wrap).then(canvas => {
//  console.log(canvas)
//  document.body.appendChild(canvas)
// })
