import openai from "../../config/openaiClient.js";
import limit from "./rateLimiter.js";
import { getViolationLabels } from "./categoryLabel.js";
import { getCachedModeration, setCachedModeration } from "./cache.js";
import retry from "async-retry";
/**
 * Ki·ªÉm duy·ªát n·ªôi dung b·∫±ng OpenAI v√† tr·∫£ l·∫°i to√†n b·ªô k·∫øt qu·∫£.
 * @param {string} text - N·ªôi dung c·∫ßn ki·ªÉm duy·ªát.
 * @returns {object} - ƒê·ªëi t∆∞·ª£ng moderationResult.results[0]
 */

const MAX_TEXT_LENGTH = 2048;

const callModerationAPI = async (text) => {
    return await limit(() => openai.moderations.create({
        input: text,
        model: "omni-moderation-latest",
    }));
};


export const checkContentByAI = async (text) => {
    if (!text || typeof text !== 'string') {
        throw new Error("ƒê·∫ßu v√†o ph·∫£i l√† m·ªôt chu·ªói h·ª£p l·ªá.");
    }
    if (text.length > MAX_TEXT_LENGTH) {
        throw new Error(`N·ªôi dung v∆∞·ª£t qu√° gi·ªõi h·∫°n ${MAX_TEXT_LENGTH} k√Ω t·ª±.`);
    }
    const cached = await getCachedModeration(text);
    if (cached) return {
        ...extractViolationFromResult(cached),
        labels: getViolationLabels(cached)
    }

    try {
        const moderationResponse = await retry(
            () => callModerationAPI(text),
            { retries: 3, minTimeout: 1000 }
        );

        const result = moderationResponse.results[0];
        if (!result) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ ki·ªÉm duy·ªát t·ª´ API.");
        }
        setCachedModeration(text, result); // Cache to√†n b·ªô result
        const rawResult = {
            result: result.flagged,
            categories: result.categories,
            category_scores: result.category_scores,
        }
        return {
            ...extractViolationFromResult(result),
            labels: getViolationLabels(result),
            rawResult: rawResult,
        };
    } catch (error) {
        console.error("L·ªói ki·ªÉm duy·ªát AI:", {
            message: error.message,
            stack: error.stack,
            status: error.response?.status,
        });
        return {
            hasViolation: false,
            violationDetails: "",
        };
  }
};
/**
 * ƒê√°nh gi√° vi ph·∫°m t·ª´ k·∫øt qu·∫£ ki·ªÉm duy·ªát c·ªßa OpenAI.
 * @param {Object} result - K·∫øt qu·∫£ t·ª´ OpenAI Moderation API.
 * @returns {{ hasViolation: boolean, violationDetails: string }} K·∫øt qu·∫£ ƒë√°nh gi√° vi ph·∫°m.
 * @throws {Error} N·∫øu result kh√¥ng h·ª£p l·ªá.
 */
export const CUSTOM_THRESHOLDS = {
  'sexual': 0.25,
  "violence": 0.15,
  'sexual/minors': 0.01,
  "harassment": 0.2,
  "hate": 0.2,
};

function extractViolationFromResult(result) {
    if (!result || !result.category_scores || !result.categories) {
        throw new Error("K·∫øt qu·∫£ ki·ªÉm duy·ªát kh√¥ng h·ª£p l·ªá.");
    }
  const scores = result.category_scores;
  const categories = result.categories;

  // Vi ph·∫°m theo ng∆∞·ª°ng t√πy ch·ªânh
  const customViolations = Object.entries(CUSTOM_THRESHOLDS)
    .filter(([category, threshold]) => scores[category] > threshold)
    .map(([category]) => ({
      category,
      score: scores[category],
    }));

    
    // Vi ph·∫°m theo ƒë√°nh gi√° m·∫∑c ƒë·ªãnh c·ªßa OpenAI
   const flaggedCategories = Object.entries(categories)
    .filter(([_, isFlagged]) => isFlagged)
    .map(([category]) => category);
    
    const hasOpenAIFlagged = flaggedCategories.length > 0;
    const hasCustomViolation = customViolations.length > 0;

    // G·ªôp th√¥ng tin chi ti·∫øt
    const detailsParts = [];

    if (hasOpenAIFlagged) {
        detailsParts.push(`üî¥ OpenAI flagged: ${flaggedCategories.join(", ")}`);
    }

    if (hasCustomViolation) {
        const customDetails = customViolations
        .map(v => `${v.category}: ${v.score.toFixed(2)}`)
        .join(", ");
        detailsParts.push(`‚ö†Ô∏è Custom threshold violations: ${customDetails}`);
    }
    return {
        hasViolation: hasOpenAIFlagged || hasCustomViolation,
        violationDetails: detailsParts.join(" | ")|| "Kh√¥ng c√≥ vi ph·∫°m",
    };
}
